<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>第 38 页 &#8211; 酷 壳 &#8211; CoolShell</title>
	<atom:link href="https://coolshell.cn/feed?paged=38" rel="self" type="application/rss+xml" />
	<link>https://coolshell.cn</link>
	<description>享受编程和技术所带来的快乐 - Coding Your Ambition</description>
	<lastBuildDate>Sat, 12 Apr 2014 03:51:45 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>十个Web开发文章和教程</title>
		<link>https://coolshell.cn/articles/1387.html</link>
					<comments>https://coolshell.cn/articles/1387.html#respond</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Mon, 31 Aug 2009 09:18:41 +0000</pubDate>
				<category><![CDATA[Web开发]]></category>
		<category><![CDATA[技术读物]]></category>
		<category><![CDATA[杂项资源]]></category>
		<category><![CDATA[CSS3]]></category>
		<category><![CDATA[jQuery]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[Wordpress]]></category>
		<category><![CDATA[正则表达式]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1387</guid>

					<description><![CDATA[<p>下面是十个在2009年8月份里出现的十个非常不错的Web开发方面的文章和教程。推荐给大家，当然，都是英文啦。如果你愿意，欢迎翻译后提交给酷壳。 1）一个简单的L...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1387.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1387.html">十个Web开发文章和教程</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script>下面是十个在2009年8月份里出现的十个非常不错的Web开发方面的文章和教程。推荐给大家，当然，都是英文啦。如果你愿意，欢迎翻译后提交给<a href="https://coolshell.cn" target="_blank">酷壳</a>。</p>
<p>1）<a href="http://www.queness.com/post/530/simple-lava-lamp-menu-tutorial-with-jquery" target="_blank">一个简单的Lava 灯式的菜单</a>（使用jQuery完成）</p>
<p>2）<a href="http://www.jankoatwarpspeed.com/post/2009/08/20/Table-of-contents-using-jQuery.aspx" target="_blank">使用jQuery自动生成文章内容的目录</a>。就像是使用Word一样，设置一下标题，然后可以自动生成文章的目录。</p>
<p>3）<a href="http://www.queness.com/post/484/create-a-thumbnail-gallery-with-slick-heading-and-caption-effect-with-jquery" target="_blank">使用jQuery为图片创建图片标题和描述</a>。这是一个超Cool的效果，当你的鼠标移到图片上的时候，图片的上下会出现遮覆，上面是标题，下面是描述，相当不错的用户体验，当鼠标移开后，遮覆消失。</p>
<p><span id="more-1387"></span></p>
<p>4）<a href="http://net.tutsplus.com/videos/screencasts/a-crash-course-in-advanced-css3-effects/" target="_blank">CSS3速成教程</a>。主要讨论了CSS3的这些特性：旋转和改变大小，动画，Photoshop风格的遮罩，图片倒影，色彩渐变，转换等。有一个不错的flash视频。</p>
<p>5）<a href="http://www.hongkiat.com/blog/30-new-useful-wordpress-tricks-hacks/" target="_blank">30+相当有用的Wordpress的巧门</a>。相当相当不错的一些和Wordpress相关的插件和小巧门，非常非常地实用。</p>
<p>6）<a href="http://www.noupe.com/php/htaccess-techniques.html" target="_blank">htaccess技术的权威性指南</a>。本文给出了12个非常有用的apache的设置，可以让你更容易设置你的站点，在这篇文章的最后，还列出了一些经验上的东西。另外，你可以参考本站的《<a rel="bookmark" href="https://coolshell.cn/articles/1035.html">16个简单实用的.htaccess小贴示</a>》。</p>
<p>7）<a href="http://www.noupe.com/php/php-regular-expressions.html" target="_blank">PHP正则表达式入门</a>。一个相当不错的入门教程，写得简单易懂。</p>
<p>8）<a href="http://net.tutsplus.com/tutorials/other/8-regular-expressions-you-should-know/" target="_blank">你需要知道的8个正则表达式</a>。正则表达式很有用，但是它具体用在什么地方呢？这篇文章给你了一票非常实用的示例。相当的不错。浏览这篇文章时别忘了看一下大家的回复，那里面也有很多不错的资源。</p>
<p>9）<a href="http://speckyboy.com/2009/08/26/20-jquery-plugins-and-tutorials-to-enhance-forms/" target="_blank">20个可以改进表单的jQuery插件</a>。都是相当实用的插件，可以让你的Web表单相当的成熟和有很好的用户体验。</p>
<p>10）<a href="http://css-tricks.com/inapproprite-uses/" target="_blank">数据库，HTML，CSS，JS不适应的用法</a>。很不错的文章，你需要记住下面的这个表格。</p>
<div style="PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 5px; OVERFLOW: hidden; PADDING-TOP: 5px; BORDER-BOTTOM: #cccccc 1px solid">
<div style="display: block; float: left; width: 200px; text-align: right;">Database</div>
<div><em style="PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0pt; PADDING-TOP: 0pt">is for</em>content</div>
</div>
<div style="PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 5px; OVERFLOW: hidden; PADDING-TOP: 5px; BORDER-BOTTOM: #cccccc 1px solid">
<div style="display: block; float: left; width: 200px; text-align: right;">HTML</div>
<div><em style="PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0pt; PADDING-TOP: 0pt">is for</em>describing and displaying content</div>
</div>
<div style="PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 5px; OVERFLOW: hidden; PADDING-TOP: 5px; BORDER-BOTTOM: #cccccc 1px solid">
<div style="display: block; float: left; width: 200px; text-align: right;">CSS</div>
<div><em style="PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0pt; PADDING-TOP: 0pt">is for</em>design</div>
</div>
<div style="PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 5px; OVERFLOW: hidden; PADDING-TOP: 5px; BORDER-BOTTOM: #cccccc 1px solid">
<div style="display: block; float: left; width: 200px; text-align: right;">JavaScript</div>
<div><em style="PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0pt; PADDING-TOP: 0pt">is for</em>functionality</div>
</div>
<p>（全文完）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/4795.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg" alt="开源中最好的Web开发的资源" width="150" height="150" /></a><a href="https://coolshell.cn/articles/4795.html" class="wp_rp_title">开源中最好的Web开发的资源</a></li><li ><a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2011/02/1128-150x150.jpg" alt="Web开发人员速查卡" width="150" height="150" /></a><a href="https://coolshell.cn/articles/3684.html" class="wp_rp_title">Web开发人员速查卡</a></li><li ><a href="https://coolshell.cn/articles/8170.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2012/08/ajax_error-150x150.jpg" alt="一次Ajax查错的经历" width="150" height="150" /></a><a href="https://coolshell.cn/articles/8170.html" class="wp_rp_title">一次Ajax查错的经历</a></li><li ><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2012/07/muxnt-150x150.jpg" alt="代码执行的效率" width="150" height="150" /></a><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_title">代码执行的效率</a></li><li ><a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2011/09/image008-150x150.jpg" alt="一些文章和各种资源" width="150" height="150" /></a><a href="https://coolshell.cn/articles/5224.html" class="wp_rp_title">一些文章和各种资源</a></li><li ><a href="https://coolshell.cn/articles/5160.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2011/08/Pagination-e1312791884744-150x150.jpg" alt="PHP分页技术的代码和示例" width="150" height="150" /></a><a href="https://coolshell.cn/articles/5160.html" class="wp_rp_title">PHP分页技术的代码和示例</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1387.html">十个Web开发文章和教程</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1387.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>如何调试bash脚本</title>
		<link>https://coolshell.cn/articles/1379.html</link>
					<comments>https://coolshell.cn/articles/1379.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Mon, 31 Aug 2009 07:53:40 +0000</pubDate>
				<category><![CDATA[Unix/Linux]]></category>
		<category><![CDATA[编程工具]]></category>
		<category><![CDATA[Bash]]></category>
		<category><![CDATA[Debug]]></category>
		<category><![CDATA[Linux]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1379</guid>

					<description><![CDATA[<p>Bash 是Linux操作系统的默认Shell脚本。Shell是用来处理操作系统和用户交互的一个程序。Shell的脚本可以帮助用户自动化地和操作系统进行交互。你...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1379.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1379.html">如何调试bash脚本</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script><a href="http://en.wikipedia.org/wiki/Bash"><img decoding="async" loading="lazy" class="alignright" title="如何调试Bash脚本" src="https://coolshell.cn/wp-content/uploads/2009/08/bash.jpg" alt="如何调试Bash脚本" width="120" height="120" />Bash</a> 是Linux操作系统的默认Shell脚本。Shell是用来处理操作系统和用户交互的一个程序。Shell的脚本可以帮助用户自动化地和操作系统进行交互。你也可以理解为一种脚本式的编程。即然有编程，那么，程序的编译器，解释器，调试器就必不可少了，Bash也一样，但在调试方面可能会有一些和编程语言不一样的东西和技术，所以，下面这篇文章主要是说明调试bash脚本的各种技术。</p>
<h4 id="Tracing_script_execution">跟踪脚本的执行</h4>
<p>你可以让bash打印出你脚本执行的过程中的所有语句。这很简单，只需要使用bash的-x选项就可以做到，下面让我们来看一下。</p>
<p><span id="more-1379"></span></p>
<p>下面的这段脚本，先是输出一个问候语句，然后输出当前的时间：</p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">
#!/bin/bash
echo &quot;Hello $USER,&quot;
echo &quot;Today is $(date +&#039;%Y-%m-%d&#039;)&quot;
</pre>
<p>下面让我们使用-x选项来运行这段脚本：</p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">
$ bash -x example_script.sh
+ echo &#039;Hello chenhao,&#039;
Hello chenhao,
++ date +%Y-%m-%d
+ echo &#039;Today is 2009-08-31&#039;
Today is 2009-08-31
</pre>
<p>这时，我们可以看到，bash在运行前打印出了每一行命令。而且每行前面的+号表明了嵌套。这样的输出可以让你看到命令执行的顺序并可以让你知道整个脚本的行为。<br />
<strong>在跟踪里输出行号</strong></p>
<p>在一个很大的脚本中，你会看到很多很多的执行跟踪的输出，阅读起来非常费劲，所以，你可以在每一行前加上文件的行号，这会非常有用。要做到这样，你只需要设置下面的环境变量：</p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW"> 
export PS4=&#039;+${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]}: &#039;
</pre>
<p>让我们看看设置上了PS4这个环境变量后会是什么样的输出。</p>
<p> </p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">
$ bash -x example_script.sh
+example_script.sh:2:: echo &#039;Hello chenhao,&#039;
Hello chenhao,
++example_script.sh:3:: date +%Y-%m-%d
+example_script.sh:3:: echo &#039;Today is 2009-08-31&#039;
Today is 2009-08-31
</pre>
<p> <br />
<strong>调试部份的脚本</strong></p>
<p>有些时候，你并不想调试整个脚本，你只要调试其中的一部份，那么，你可以在你想要调试的脚本之前，调用“set -x”，结束的时候调用“set +x”就可以了。如下面的脚本所示：</p>
<p> </p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">
#!/bin/bash
echo &quot;Hello $USER,&quot;
set -x
echo &quot;Today is $(date %Y-%m-%d)&quot;
set +x
</pre>
<p> </p>
<p>让我们看看运行起来是啥样？</p>
<p> </p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">
$ ./example_script.sh
Hello chenhao,
++example_script.sh:4:: date +%Y-%m-%d
+example_script.sh:4:: echo &#039;Today is 2009-08-31&#039;
Today is 2009-08-31
+example_script.sh:5:: set +x
</pre>
<p> </p>
<p>注意：我们在运行脚本的时候，不需要使用<span>bash -x了。</span></p>
<p><span> </span></p>
<h4 id="Logging">日志输出</h4>
<p>跟踪日志有时候太多了，多得都受不了，而且，输出的内容很难阅读。一般来说，我们很多时候只关心于条件表达式，变量值，或是函数调用，或是循环等。。在这种情况下，log一些感兴趣的特定的信息，可能会更好。</p>
<p>使用log前，我们先写一个函数：</p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">
_log() {
    if [ &quot;$_DEBUG&quot; == &quot;true&quot; ]; then
        echo 1&gt;&amp;2 &quot;$@&quot;
    fi
}
</pre>
<p> </p>
<p>于是，你就可以在你的脚本中如下使用：</p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW"> 
_log &quot;Copying files...&quot;
cp src/* dst/
</pre>
<p> <br />
我们可以看到，上面那个_log函数，需要检查一个<span>_DEBUG</span> 变量，只有这个变量是真，才会真正开发输出日志。这样，你就只需要控制这个开关，而不需要删除你的debug信息。</p>
<p> </p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW"> 
$ _DEBUG=true ./example_script.sh
</pre>
<p> </p>
<h4 id="Using_the_Bash_debugger">使用Bash专用调试器</h4>
<p>如果你在写一个相当复杂的脚本，并且，你需要一个完整的像调试别的语言一样的调试器，那么你可以试着用用这个开源软件—— <a href="http://bashdb.sourceforge.net/">bashdb</a>， 一个Bash的专用调试器。这个调试器很强大，你想得到的功能，他都有，比如，设置断点，单步跟踪，跳出函数，等等。它的用户接口很想GDB，这是他的<a href="http://bashdb.sourceforge.net/bashdb.html">文档</a> 。</p>
<p>（全文完）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2022/12/eBPF-150x150.jpeg" alt="eBPF 介绍" width="150" height="150" /></a><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_title">eBPF 介绍</a></li><li ><a href="https://coolshell.cn/articles/8883.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2013/01/linux-bash-300x225-150x150.jpg" alt="应该知道的Linux技巧" width="150" height="150" /></a><a href="https://coolshell.cn/articles/8883.html" class="wp_rp_title">应该知道的Linux技巧</a></li><li ><a href="https://coolshell.cn/articles/8619.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2012/11/shell.01-150x150.png" alt="你可能不知道的Shell" width="150" height="150" /></a><a href="https://coolshell.cn/articles/8619.html" class="wp_rp_title">你可能不知道的Shell</a></li><li ><a href="https://coolshell.cn/articles/2987.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/5.jpg" alt="用脚本实现哄宝宝睡觉(Demo)" width="150" height="150" /></a><a href="https://coolshell.cn/articles/2987.html" class="wp_rp_title">用脚本实现哄宝宝睡觉(Demo)</a></li><li ><a href="https://coolshell.cn/articles/1539.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2009/10/baby_linux-150x150.jpg" alt="用脚本实现哄小孩睡觉" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1539.html" class="wp_rp_title">用脚本实现哄小孩睡觉</a></li><li ><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2019/03/linux.ninja_-150x150.png" alt="打造高效的工作环境 &#8211; Shell 篇" width="150" height="150" /></a><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_title">打造高效的工作环境 &#8211; Shell 篇</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1379.html">如何调试bash脚本</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1379.html/feed</wfw:commentRss>
			<slash:comments>11</slash:comments>
		
		
			</item>
		<item>
		<title>初学C#编程的注意事项</title>
		<link>https://coolshell.cn/articles/1375.html</link>
					<comments>https://coolshell.cn/articles/1375.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Mon, 31 Aug 2009 04:15:05 +0000</pubDate>
				<category><![CDATA[.NET编程]]></category>
		<category><![CDATA[编程语言]]></category>
		<category><![CDATA[C++]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1375</guid>

					<description><![CDATA[<p>下面是8个C#编程时的注意事项是给初学者的，可能你知道，也可能你不知道，不过这些都是一些可能会让人疏忽的地方，还是要注意一下。 1.使用String变量: 考虑...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1375.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1375.html">初学C#编程的注意事项</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script>下面是8个C#编程时的注意事项是给初学者的，可能你知道，也可能你不知道，不过这些都是一些可能会让人疏忽的地方，还是要注意一下。</p>
<p><strong>1.使用String变量:</strong></p>
<p>考虑有下面的一个程序想判断一下字符串是否有内容。</p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
if (someString.Length &gt; 0)
{
    // …
}
</pre>
<p>但是，这个字符串对象很可能是个空对象，所以，最好先判断一下null</p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
if  (!String.IsNullOrEmpty(someString))
{
    // 是不是更好一些？
}
</pre>
<p><span id="more-1375"></span></p>
<p><strong>2.字符器连接</strong></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
string s = “dev”;
s += “-”;
s += “the”;
s += “-”;
s += “web”;
s += “.”;
s += “com”;
</pre>
<p>这样做没什么问题，只不过性能不高，因为+=操作符其实调用的是String类的Append访问，所以，+=会有两次函数调用，下面的则会好一些。</p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
StringBuilder s = new StringBuilder();
s.Append(”dev”);
s.Append(”-”);
s.Append(”the”);
s.Append(”-”);
s.Append(”web”);
s.Append(”.”);
s.Append(”com”);
</pre>
<p><strong>3.使用Console</strong></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
Console.WriteLine(&quot;A= &quot; + 1 + &quot; B=&quot; + 2 + &quot; C= &quot; + someValue);
</pre>
<p>和第二点说的一样，这并没有效率，使用下面的语句，会更有效率。</p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
Console.WriteLine(”A: {0}\nB: {1}\nC: {2}”, 1, 2, someValue);
</pre>
<p><strong>4.字符串转整型</strong></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
int i = int.Parse(Request.QueryString[&quot;id&quot;]);
</pre>
<p>这样做的问题是，如果有人这样请求你的页面：yourpage.aspx?id=A6，那么A6将会导致你的程序抛出一个异常。因为A6不是一个整数字符串。使用TryParse会好一点。</p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
int i;
if (!int.TryParse(Request.QueryString[&quot;id&quot;] , out i))
{
    //…
}
</pre>
<p><strong>5. 调用IDbConnection 的 Close 方法</strong></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
IDbConnection dbConn = null;

try
{
    dbConn = new SqlConnection(”some Connection String”);
    dbConn.Open();
}
finally
{
    dbConn.Close();
}
</pre>
<p>调用SqlConnection的构造函数可能会出现一个异常，如果是这样的话，我们还需要调用Close方法吗？</p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
IDbConnection dbConn = null;

try
{
    dbConn = new SqlConnection(”Some Connection String”);
    dbConn.Open();
}
finally
{
    if (dbConn != null)
    {
        dbConn.Close();
    }
}
</pre>
<p><strong>6.使用List类</strong></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
public void SomeMethod(List&lt;SomeItem&gt; items)
{
    foreach(var item in items)
    {
        // do something with the item…
    }
}
</pre>
<p>如果我们只是遍历List容器中的所有内容的话，那么，使用IEnumerable接口会更好一些。因为函数参数传递一个List对象要比一个IEnumerable接口要花费更多的开销。</p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
public void SomeMethod(IEnumerable&lt;SomeItem&gt; items)
{
    foreach(var item in items)
    {
        // do something with the item…
    }
}
</pre>
<p><strong>7.直接使用数字</strong></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
if(mode == 1) { … }
else if(mode == 2) { … }
else if(mode == 3) { … }
</pre>
<p>为什么不给你的这些数字取个名字呢？比如使用Enumerations。</p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
public enum SomeEnumerator
{
    DefaultMode = 1,
    SafeMode = 2,
    NormalMode = 3
}

if(mode == SomeEnumerator.DefaultMode) { … }
else if(mode == SomeEnumerator.SafeMode) { … }
else if(mode == SomeEnumerator.NormalMode) { … }
</pre>
<p><strong>8.字符串替换</strong></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
string s = &quot;www.coolshell.cn is a amazing site&quot;;
s.Replace(&quot;amazing&quot;, &quot;awful&quot;);
</pre>
<p>字符串s的内容什么也不会改变，因为string返回的是替换过的字串。这点很多初学者经常忘了。下面就没有问题了。</p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">
s = s.Replace(&quot;amazing&quot;, &quot;awful&quot;);
</pre>
<p>文章：<a href="http://dev-the-web.com/blog/2009/08/27/top-csharp-programming-mistakes/" target="_blank">来源</a><!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2020/03/rust-social-wide-150x150.jpg" alt="Rust语言的编程范式" width="150" height="150" /></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a></li><li ><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg" alt="程序员练级攻略（2018)  与我的专栏" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018)  与我的专栏</a></li><li ><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg" alt="API设计原则 &#8211; Qt官网的设计实践总结" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 &#8211; Qt官网的设计实践总结</a></li><li ><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg" alt="Leetcode 编程训练" width="150" height="150" /></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a></li><li ><a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2014/10/edsm-150x150.gif" alt="State Threads 回调终结者" width="150" height="150" /></a><a href="https://coolshell.cn/articles/12012.html" class="wp_rp_title">State Threads 回调终结者</a></li><li ><a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2014/04/c99-150x150.jpg" alt="C语言的整型溢出问题" width="150" height="150" /></a><a href="https://coolshell.cn/articles/11466.html" class="wp_rp_title">C语言的整型溢出问题</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1375.html">初学C#编程的注意事项</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1375.html/feed</wfw:commentRss>
			<slash:comments>15</slash:comments>
		
		
			</item>
		<item>
		<title>谁写了Linux</title>
		<link>https://coolshell.cn/articles/1360.html</link>
					<comments>https://coolshell.cn/articles/1360.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Tue, 25 Aug 2009 11:36:19 +0000</pubDate>
				<category><![CDATA[Unix/Linux]]></category>
		<category><![CDATA[技术新闻]]></category>
		<category><![CDATA[技术读物]]></category>
		<category><![CDATA[操作系统]]></category>
		<category><![CDATA[Linux]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1360</guid>

					<description><![CDATA[<p>2009年8月，Linux软件基金会发布了一份叫《Who Writes Linux and Who Supports It》(PDF)的报告。这份报告主要对Li...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1360.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1360.html">谁写了Linux</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script><a href="http://www.linuxfoundation.org/sites/www.linuxfoundation.org/themes/opensourcery/images/linux-foundation.png" target="_blank"><img decoding="async" class="alignright" src="http://www.linuxfoundation.org/sites/www.linuxfoundation.org/themes/opensourcery/images/linux-foundation.png" alt="" /></a>2009年8月，<a href="http://www.linuxfoundation.org/" target="_blank">Linux软件基金会</a>发布了一份叫《<a href="http://www.linuxfoundation.org/publications/whowriteslinux.pdf" target="_blank">Who Writes Linux and Who Supports It</a>》(PDF)的报告。这份报告主要对Linux 2.6.x的开发进行了全方位的统计。看了以后才知道，原来Linux的开发的生产率竟是这样的惊人，而且相当的的令人振奋，所以，在第一时间转过来给大家看看。让人不得不惊叹，这不可思议的具有非凡活力的社区。（注意，我们这里说的是Linux，不是GNU的那些东西，所谓Linux就是Linux的Kernel）</p>
<p>下面是一个导读，希望每一个看到这篇文章的朋友都能看看原文的报告：《<a href="http://www.linuxfoundation.org/publications/whowriteslinux.pdf" target="_blank">Who Writes Linux and Who Supports It</a>》(PDF)</p>
<p>这份报告的一开始就对Linux的开发进行了总结：</p>
<ul>
<li>每2-3个月一个release</li>
<li>最近的每一次release都超过10000个补丁</li>
<li>有超过1000个开发人员进行开发，他们来自200个公司或组织。</li>
<li>自2005年以来，超过5000个来自500个不同公司的开发人员为Linux内核做过贡献。</li>
<li>自2008年以来，每次release，都大约增加了10%左右的开发人员，而且，代码码达到了2.7百万行。</li>
</ul>
<p>是的，这样的生产率真是太疯狂了。下面是这份文档中所涉及的一些介绍和一些具体的统计数据。</p>
<p><span id="more-1360"></span></p>
<h4>Linux开发模式</h4>
<p>Linux的开发采用的是一种宽松的，基于时间的开发模式。每一个新的主要版本的release基本上会发生在2-3个月之内。这个开发模式是在2005年形成的，因为任何人都可以修改其内核的代码，所以，很多补丁进入内核的时间非常的快。</p>
<p>其中一个有意义的事是，他们有一个叫Linux-Next的服务器，这个服务器一般来说会是下一个版本的staging，比如，如果目前的稳定版本是2.6.31，那么Linux-Next上就会运行2.6.32。这样，所有的developer都能看到下一个版本总体的样子，而且，这更容易发现一些集成性的问题。</p>
<p>在2.6的mainline代码库上（mailline是代码库的主线），有一个叫做“stable team”的团队，他们会做短期的维护工作，他们确保所有的重要的补丁或更改都会被放入mailline中，这样就能滚入下一个release。</p>
<p>然后，这份文档中给出了大量的开发编译数据。</p>
<h4>统计数据</h4>
<p>下面的统计数据是从版本2.6.11开始的，我把源文件中的表格合并成一个大表，如下所示。</p>
<p style="text-align: center;"><img decoding="async" loading="lazy" title="Linux Kernel开发统计数据" src="https://coolshell.cn/wp-content/uploads/2009/08/Linux-Stat.png" alt="Linux Kernel开发统计数据" width="571" height="347" /></p>
<p style="text-align: left;">从上图我们可以看到下面这些东西：</p>
<ul>
<li>
<div style="text-align: left;">Linux Kernel开发的速度越来越快，看看每个release的补丁数，每天文件增、删、改就可以知道。</div>
</li>
<li>
<div style="text-align: left;">Linux Kernel开发的团队是越来越大，包括人员和参与的公司。</div>
</li>
</ul>
<p style="text-align: left;">下面是几个统计图表：</p>
<p style="text-align: center;"><img decoding="async" loading="lazy" title="平均每天的修改" src="https://coolshell.cn/wp-content/uploads/2009/08/linuxp1.png" alt="linuxp1" width="483" height="349" /><br />
平均每天的修改</p>
<p style="text-align: center;"><img decoding="async" loading="lazy" title="代码修改统计" src="https://coolshell.cn/wp-content/uploads/2009/08/linuxp2.png" alt="linuxp2" width="528" height="383" /><br />
代码修改统计</p>
<p style="text-align: center;"><img decoding="async" loading="lazy" title="开发人员" src="https://coolshell.cn/wp-content/uploads/2009/08/linuxp3.png" alt="linuxp3" width="615" height="486" /><br />
开发人员</p>
<h4 style="text-align: left;">谁写了Linux</h4>
<p style="text-align: left;">最后我们进入主题——谁写了Linux，首先，我们先来看一下进入代码修改的Top 30的开发人员列表：</p>
<p><img decoding="async" loading="lazy" class="aligncenter" title="Top 30 Linux developer" src="https://coolshell.cn/wp-content/uploads/2009/08/Linux-developer.png" alt="Top 30 Linux developer" width="585" height="546" /></p>
<p>我们可以看到，Linus Torvalds （729 总修改，自2.6.24版来254 修改）无法进入前30名。当然，对Linux的贡献绝对不能通过代码行来表示，Linus对Linux就算是在今天也是至关紧要的。</p>
<p>好，让我们再来看看那些公司对Linux的贡献。根据这份报告所说，知道每个developer所在的公司，主要是通过了下面的几种方法：</p>
<ul>
<li>使用的邮件地址有公司的名字。</li>
<li>由赞助者提交的代码。</li>
<li>直接询问得到的。</li>
</ul>
<p>所以，这些数据只能算得上的近似，不过也能看到一个总体的样子了。下图中“None”代表没有职业无业游民，“Unknown”代表无名氏或是英雄不知出处。</p>
<p style="text-align: center;"><img decoding="async" loading="lazy" title="Linux Company Top 30" src="https://coolshell.cn/wp-content/uploads/2009/08/linux-company.png" alt="Linux Company Top 30" width="552" height="546" /></p>
<p>我们可以看到，Top 10公司，为Linux贡献了近70%的代码。包括了None和Unknown，而且，那些是拿着公司报酬给Linux作开发的程序员。</p>
<p>那么，为什么这些公司要支持Linux的内核开发呢？</p>
<ul>
<li>我们可以看到像IBM, Intel, SGI, MIPS, Freescale, HP, Fujitsu这样的大公司，他们的目的当然是为了确保Linux能够在他们的硬件上工作得更好。</li>
<li>我们也可以看到像Red Hat, Novell, 和MontaVista这些Linux的Distribution公司，他们是Linux的主力，主要是为了提供给他们的客户更好的服务。</li>
<li>同样，我们还能看到像Sony, Nokia, 和Samsung这样的公司，这些公司主要是用Linux来开发数码产品，如摄像机、手机或是电视，他们使用Linux做一些嵌入式开发，以保证他们的产品工作得更好。</li>
<li>还有一些和IT都没有关系的，例如：Volkswagen公司在v21.6.25中为Linux加入了PF_CAN网络实现的协议。Quantum Controls BV公司在2.6.30时加入了一个航海导航的补丁，这些公司都会使用Linux来完善他们的产品。</li>
</ul>
<p>看来，Linux的势头是越来越无法阻挡了，你也想加入这个阵营吗？点下面的链接吧：<a href="http://ldn.linuxfoundation.org/book/how-participate-linux-community">http://ldn.linuxfoundation.org/book/how-participate-linux-community</a></p>
<p>（全文完）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2022/12/eBPF-150x150.jpeg" alt="eBPF 介绍" width="150" height="150" /></a><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_title">eBPF 介绍</a></li><li ><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2019/03/linux.ninja_-150x150.png" alt="打造高效的工作环境 &#8211; Shell 篇" width="150" height="150" /></a><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_title">打造高效的工作环境 &#8211; Shell 篇</a></li><li ><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2018/12/docker-networking-1-150x150.png" alt="记一次Kubernetes/Docker网络排障" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_title">记一次Kubernetes/Docker网络排障</a></li><li ><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg" alt="程序员练级攻略（2018)  与我的专栏" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018)  与我的专栏</a></li><li ><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2017/07/systemd-1-150x150.jpeg" alt="Linux PID 1 和 Systemd" width="150" height="150" /></a><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_title">Linux PID 1 和 Systemd</a></li><li ><a href="https://coolshell.cn/articles/17416.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2016/07/cache-150x150.png" alt="缓存更新的套路" width="150" height="150" /></a><a href="https://coolshell.cn/articles/17416.html" class="wp_rp_title">缓存更新的套路</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1360.html">谁写了Linux</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1360.html/feed</wfw:commentRss>
			<slash:comments>44</slash:comments>
		
		
			</item>
		<item>
		<title>Unix Pipes 管道原稿</title>
		<link>https://coolshell.cn/articles/1351.html</link>
					<comments>https://coolshell.cn/articles/1351.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Mon, 24 Aug 2009 16:17:11 +0000</pubDate>
				<category><![CDATA[Unix/Linux]]></category>
		<category><![CDATA[技术读物]]></category>
		<category><![CDATA[操作系统]]></category>
		<category><![CDATA[Pipe]]></category>
		<category><![CDATA[Unix]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1351</guid>

					<description><![CDATA[<p>40年前，Unix操作系统横空出世，Unix不仅仅带来了一个操作系统，还创造C语言，Socket，开源，黑客等等文化，这些文化影响着整个计算机世界的文明，直到今...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1351.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1351.html">Unix Pipes 管道原稿</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script><img decoding="async" loading="lazy" class="alignright" title="Douglas McIlroy" src="https://coolshell.cn/wp-content/uploads/2009/08/Douglas-McIlroy.jpg" alt="Douglas McIlroy" width="147" height="193" /></p>
<p>40年前，Unix操作系统横空出世，Unix不仅仅带来了一个操作系统，还创造C语言，Socket，开源，黑客等等文化，这些文化影响着整个计算机世界的文明，直到今天。</p>
<p>如果说Unix是计算机文明中最伟大的发明，那么，Unix下的Pipe管道就是跟随Unix所带来的另一个伟大的发明。管道的出现，解决的就是让不同功能的程序可以互相连通通讯，从而可以让软件开发，程序开发更加的“高内聚，低耦合”，从而可以让程序“Do one thing, Do it well”，从而可以让程序“Keep it Simple Stupid”等等，这一哲学引影了一代又一代的软件架构，直到今天的云计算。</p>
<p>管道的发名者叫，<a href="http://en.wikipedia.org/wiki/Douglas_McIlroy" target="_blank"><strong>Malcolm Douglas McIlroy</strong></a>，他也是Unix的创建者，是Unix文化的缔造者之一。他归纳的Unix哲学如下：</p>
<blockquote><p>程序应该只关注一个目标，并尽可能把它做好。让程序能够互相协同工作。应该让程序处理文本数据流，因为这是一个通用的接口。</p></blockquote>
<p><span id="more-1351"></span></p>
<p>下面是管道在1964年10月11日，出现的第一个打印稿，下面是扫描件。</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/08/pipe.png"></a></p>
<p><img decoding="async" loading="lazy" title="Unix Pipes" src="https://coolshell.cn/wp-content/uploads/2009/08/pipe.png" alt="Unix Pipes" width="612" height="790" /></p>
<p>全文如下：</p>
<pre><code>                        - 10 -
            Summary--what's most important.
    To put my strongest concerns into a nutshell:
1. We should have some ways of connecting programs like
garden hose--screw in another segment when it becomes when
it becomes necessary to massage data in another way.
This is the way of IO also.
2. Our loader should be able to do link-loading and
controlled establishment.
3. Our library filing scheme should allow for rather
general indexing, responsibility, generations, data path
switching.
4. It should be possible to get private system components
(all routines are system components) for buggering around with.

                                                M. D. McIlroy
                                                October 11, 1964
</code></pre>
<p>我就不翻译了，因为这段文字足够的简单，就像连接花园中浇花用的软管一样，相信你不但能够读懂它，还能从中收益。</p>
<p>（全文完）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/19996.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2019/11/ken.dennis-300x186-1-150x150.jpeg" alt="Unix 50 年：Ken Thompson 的密码" width="150" height="150" /></a><a href="https://coolshell.cn/articles/19996.html" class="wp_rp_title">Unix 50 年：Ken Thompson 的密码</a></li><li ><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg" alt="程序员练级攻略（2018)  与我的专栏" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018)  与我的专栏</a></li><li ><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2017/07/systemd-1-150x150.jpeg" alt="Linux PID 1 和 Systemd" width="150" height="150" /></a><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_title">Linux PID 1 和 Systemd</a></li><li ><a href="https://coolshell.cn/articles/12103.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2014/11/tux-fork-150x150.gif" alt="vfork 挂掉的一个问题" width="150" height="150" /></a><a href="https://coolshell.cn/articles/12103.html" class="wp_rp_title">vfork 挂掉的一个问题</a></li><li ><a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2014/08/puzzle-150x150.png" alt="谜题的答案和活动的心得体会" width="150" height="150" /></a><a href="https://coolshell.cn/articles/11847.html" class="wp_rp_title">谜题的答案和活动的心得体会</a></li><li ><a href="https://coolshell.cn/articles/9410.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2013/04/figure1-150x150.gif" alt="Unix考古记：一个“遗失”的shell" width="150" height="150" /></a><a href="https://coolshell.cn/articles/9410.html" class="wp_rp_title">Unix考古记：一个“遗失”的shell</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1351.html">Unix Pipes 管道原稿</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1351.html/feed</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>Unicode字符预览表</title>
		<link>https://coolshell.cn/articles/1331.html</link>
					<comments>https://coolshell.cn/articles/1331.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Mon, 24 Aug 2009 15:45:36 +0000</pubDate>
				<category><![CDATA[杂项资源]]></category>
		<category><![CDATA[Unicode]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1331</guid>

					<description><![CDATA[<p>关于Unicode的字符表，你可以在这里下载： http://www.unicode.org/Public/5.1.0/ucd/UnicodeData.txt ...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1331.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1331.html">Unicode字符预览表</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script>关于Unicode的字符表，你可以在这里下载：</p>
<p style="padding-left: 30px;"><a href="http://www.unicode.org/Public/5.1.0/ucd/UnicodeData.txt" target="_blank">http://www.unicode.org/Public/5.1.0/ucd/UnicodeData.txt</a></p>
<p>而有热心人通过上面个表格，使用JavaScript制作了下面这个网页，其穷举并可以显示上述定义的所有的Unicode字符。</p>
<p style="PADDING-LEFT: 30px; TEXT-ALIGN: left"><a href="http://www.ftrain.com/unicode/" target="_blank">http://www.ftrain.com/unicode/</a></p>
<p style="TEXT-ALIGN: left">打开这个网页，左边的那个大表格是一个10&#215;10的列表，每个小单元格上面是这个字符的样子，下面是这个字符的HTML输入格式。这个表格下面是一个预览格，因为有些这符太细腻了。</p>
<p style="TEXT-ALIGN: left"><span id="more-1331"></span></p>
<p style="TEXT-ALIGN: left">当然，所有的字符不肯定不止100个，所以，网页右上角有三个进度条，一个是100个字符的往后移动，第二个是1000个字符，第三个是10000个。</p>
<p style="TEXT-ALIGN: left">随便找了一下，找到下面这些各式各样的箭头，如下所示：</p>
<style type="text/css">
td,td {width:50px;height:50px;text-align:center;vertical-align:center;font-size:2.5em;border:1px solid #ccc;}
.exp {font:8pt sans-serif;color:#aaa;height:1em;}
</style>
<table border="1">
<tbody>
<tr>
<td>← <span class="exp">&amp;#8592;</span></td>
<td>↑ <span class="exp">&amp;#8593;</span></td>
<td>→ <span class="exp">&amp;#8594;</span></td>
<td>↓ <span class="exp">&amp;#8595;</span></td>
<td><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2194.png" alt="↔" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <span class="exp">&amp;#8596;</span></td>
<td><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2195.png" alt="↕" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <span class="exp">&amp;#8597;</span></td>
<td><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2196.png" alt="↖" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <span class="exp">&amp;#8598;</span></td>
<td><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2197.png" alt="↗" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <span class="exp">&amp;#8599;</span></td>
</tr>
<tr>
<td><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2198.png" alt="↘" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <span class="exp">&amp;#8600;</span></td>
<td><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2199.png" alt="↙" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <span class="exp">&amp;#8601;</span></td>
<td>↚ <span class="exp">&amp;#8602;</span></td>
<td>↛ <span class="exp">&amp;#8603;</span></td>
<td>↜ <span class="exp">&amp;#8604;</span></td>
<td>↝ <span class="exp">&amp;#8605;</span></td>
<td>↞ <span class="exp">&amp;#8606;</span></td>
<td>↟ <span class="exp">&amp;#8607;</span></td>
</tr>
<tr>
<td>⇞ <span class="exp">&amp;#8670;</span></td>
<td>⇟ <span class="exp">&amp;#8671;</span></td>
<td>⇠ <span class="exp">&amp;#8672;</span></td>
<td>⇡ <span class="exp">&amp;#8673;</span></td>
<td>⇢ <span class="exp">&amp;#8674;</span></td>
<td>⇣ <span class="exp">&amp;#8675;</span></td>
<td>⇤ <span class="exp">&amp;#8676;</span></td>
<td>⇥ <span class="exp">&amp;#8677;</span></td>
</tr>
</tbody>
</table>
<p>还有很多更奇怪的字符，你可以上去看看。如果你访问不了了，你可以通过本站下载这个文件：《<a href='https://coolshell.cn/wp-content/uploads/2009/08/Unicode-table.htm' target=_blank>Unicode 字符集预览表</a>》</p>
<p><!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/21649.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2021/11/il_340x270_pggv-150x150.jpg" alt="源代码特洛伊木马攻击" width="150" height="150" /></a><a href="https://coolshell.cn/articles/21649.html" class="wp_rp_title">源代码特洛伊木马攻击</a></li><li ><a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2011/02/1128-150x150.jpg" alt="Web开发人员速查卡" width="150" height="150" /></a><a href="https://coolshell.cn/articles/3684.html" class="wp_rp_title">Web开发人员速查卡</a></li><li ><a href="https://coolshell.cn/articles/1957.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/9.jpg" alt="Web程序的最佳测试数据" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1957.html" class="wp_rp_title">Web程序的最佳测试数据</a></li><li ><a href="https://coolshell.cn/articles/1830.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/8.jpg" alt="正则表达式生成器" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1830.html" class="wp_rp_title">正则表达式生成器</a></li><li ><a href="https://coolshell.cn/articles/5132.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/18.jpg" alt="疯狂的 Web 应用开源项目" width="150" height="150" /></a><a href="https://coolshell.cn/articles/5132.html" class="wp_rp_title">疯狂的 Web 应用开源项目</a></li><li ><a href="https://coolshell.cn/articles/7448.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/15.jpg" alt="扎克伯格的一封信：关于Facebook IPO" width="150" height="150" /></a><a href="https://coolshell.cn/articles/7448.html" class="wp_rp_title">扎克伯格的一封信：关于Facebook IPO</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1331.html">Unicode字符预览表</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1331.html/feed</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
		<item>
		<title>Erlang和Python互通</title>
		<link>https://coolshell.cn/articles/1313.html</link>
					<comments>https://coolshell.cn/articles/1313.html#comments</comments>
		
		<dc:creator><![CDATA[free.wang]]></dc:creator>
		<pubDate>Mon, 24 Aug 2009 14:30:49 +0000</pubDate>
				<category><![CDATA[Erlang]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[编程语言]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1313</guid>

					<description><![CDATA[<p>最近开发 Erlang ,对其字符串处理能力无言至极,于是决定把它和python联合起来,打造一个强力的分布式系统,等将来需要系统级开发时,我再把 C++/C组...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1313.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1313.html">Erlang和Python互通</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script>最近开发 Erlang ,对其字符串处理能力无言至极,于是决定把它和python联合起来,打造一个强力的分布式系统,等将来需要系统级开发时,我再把 C++/C组合进来.</p>
<p>首先参考了 Erlang 官方文档和 <a href="http://www.zend2.com/DoIt.php?u=Oi8vd3d3LmJsb2dnZXIuY29tL2Jsb2cuZGV2ZWxvcGVycy5hcGkuc2luYS5jb20uY24vP3RhZz1lcmxhbmc%3D&amp;b=5">http://<cite>blog.developers.api.sina.com.cn/?tag=<strong>erlang</strong></cite></a> 以及<a href="http://www.zend2.com/DoIt.php?u=Oi8va2F6bWllci5uZXQvY29tcHV0ZXIvcG9ydC1ob3d0by8%3D&amp;b=5"> http://kazmier.net/computer/port-howto/</a> .</p>
<p>研读了将近24个小时, 才终于完全把问题解决.  起名为town，town在英文里表示集市，也就是代表各种语言在这里的交流与互动。) )<br />
<span id="more-1313"></span><br />
[erl]-module(town).<br />
-behaviour(gen_server).</p>
<p>%% API<br />
-export([start/0,combine/1]).</p>
<p>%% gen_server callbacks<br />
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,<br />
terminate/2, code_change/3]).<br />
-record(state, {port}).</p>
<p>start() -&amp;gt;<br />
  gen_server:start_link({global, ?MODULE}, ?MODULE, [], []).<br />
stop() -&amp;gt;<br />
  gen_server:cast(?SERVER, stop).<br />
init([]) -&amp;gt;<br />
  process_flag(trap_exit, true),<br />
  Port = open_port({spawn, &quot;python -u /home/freefis/Desktop/town.py&quot;},[stream,{line, 1024}]),<br />
  {ok, #state{port = Port}}.</p>
<p>handle_call({combine,String}, _From, #state{port = Port} = State) -&amp;gt;<br />
  port_command(Port,String),<br />
  receive<br />
    {Port,{data,{_Flag,Data}}} -&amp;gt;<br />
      io:format(&quot;receiving:~p~n&quot;,[Data]),<br />
      sleep(2000),<br />
      {reply, Data, Port}<br />
  end.<br />
handle_cast(stop, State) -&amp;gt;<br />
  {stop, normal, State};<br />
handle_cast(_Msg, State) -&amp;gt;<br />
  {noreply, State}.</p>
<p>handle_info(Info, State) -&amp;gt;<br />
  {noreply,State}.</p>
<p>terminate(_Reason, Port) -&amp;gt;<br />
  ok.</p>
<p>code_change(_OldVsn, State, _Extra) -&amp;gt;<br />
  {ok, State}.</p>
<p>%%&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br />
%%% Internal &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
combine(_String) -&amp;gt;<br />
  start(),<br />
  String = list_to_binary(&quot;combine|&quot;++_String++&quot;\n&quot;),<br />
  gen_server:call(?SERVER,{combine,String},infinity),<br />
  stop().[/erl]<br />
这段是Python的脚本 当erlang中town:combine(&#8220;sentence1+sentence2&#8221;)执行时，会在后台启动python的脚本，处理完毕后返回给Erlang结果:sentence1sentence2，然后退出。 </p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">
import sys
def handle(_string):
    if _string.startswith(&quot;combine|&quot;):
        string = &quot;&quot;.join( _string[8:].split(&quot;,&quot;))
        return string

&quot;&quot;&quot;waiting for input &quot;&quot;&quot;
while 1:
    # Recv. Binary Stream as Standard IN
    _stream = sys.stdin.readline()

if not _stream: break
    # Scheme, Turn into  Formal String
    inString  = _stream.strip(&quot;\r\n&quot;)
    # handle String
    outString = handle(inString)
    # send to port as Standart OUT
    sys.stdout.write(&quot;%s\n&quot; % (outString,))
    sys.exit(0)</pre>
<p><!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/1839.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2009/11/oscar-meyer-wienermobile-150x150.jpg" alt="编程语言汽车" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1839.html" class="wp_rp_title">编程语言汽车</a></li><li ><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg" alt="程序员练级攻略（2018)  与我的专栏" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018)  与我的专栏</a></li><li ><a href="https://coolshell.cn/articles/11265.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2014/03/snake-hat-new-year-schedule-800x960-150x150.jpg" alt="Python修饰器的函数式编程" width="150" height="150" /></a><a href="https://coolshell.cn/articles/11265.html" class="wp_rp_title">Python修饰器的函数式编程</a></li><li ><a href="https://coolshell.cn/articles/10822.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2013/12/yoda-lambda-150x150.png" alt="函数式编程" width="150" height="150" /></a><a href="https://coolshell.cn/articles/10822.html" class="wp_rp_title">函数式编程</a></li><li ><a href="https://coolshell.cn/articles/10169.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/5.jpg" alt="类型的本质和函数式实现" width="150" height="150" /></a><a href="https://coolshell.cn/articles/10169.html" class="wp_rp_title">类型的本质和函数式实现</a></li><li ><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2012/07/muxnt-150x150.jpg" alt="代码执行的效率" width="150" height="150" /></a><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_title">代码执行的效率</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1313.html">Erlang和Python互通</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1313.html/feed</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
		<item>
		<title>在线代码编译服务Codepad.org</title>
		<link>https://coolshell.cn/articles/1310.html</link>
					<comments>https://coolshell.cn/articles/1310.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Sun, 23 Aug 2009 12:14:44 +0000</pubDate>
				<category><![CDATA[杂项资源]]></category>
		<category><![CDATA[编程工具]]></category>
		<category><![CDATA[Codepad]]></category>
		<category><![CDATA[Coding]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1310</guid>

					<description><![CDATA[<p>Codepad.org是一个很有意思的网站，它的主页很简单，左边是可以编译并执行的程序语言，右边则是让你输入程序的输入框，输入框的下面是一个“Run Code”...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1310.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1310.html">在线代码编译服务Codepad.org</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script>Codepad.org是一个很有意思的网站，它的主页很简单，左边是可以编译并执行的程序语言，右边则是让你输入程序的输入框，输入框的下面是一个“Run Code”的复选钮和一个“Submit”的提交按钮。</p>
<p>其操作起来也非常简单，先选中你要编译并运行的程序语言，然后在输入框中粘贴或输入程序的原代码，然后，点击提交，你就可以看么你程序编译出错的提示，或是执行的结果。</p>
<p>也许，你会觉得很无聊天，但我觉得这在某些时候会非常有用，尤其是你找不到编译器而又想验证一段代码的时候，这种时候还是比较多的。特别是我们很难有一台可以运行所有语言的电脑，如果有的话，那一定是你自己的个人电脑，当你不使用你自己的电脑时，你就会着急了。而且，我觉得这项服务非常地有意思，因为，这样一来，你甚至可以在你的手机上写任何语言的程序了。</p>
<p><span id="more-1310"></span></p>
<p>目前这个网站支持下面这样语言——C，C++，D，Haskell，Lua，OCaml，PHP，Perl，Plain Text，Python，Ruby，Scheme，Tcl。（没有Java）</p>
<p>当我打开这个网页的时候，我立马想到了《<a title="作者：耗子  --  521 次点击" href="https://coolshell.cn/articles/914.html">6个变态的C语言Hello World程序</a>》，然后就取了其中一个上去试了一下，果然方便啊。的确是相当的省事啊，不需要打开编译器或IDE，不需要建工程，不需要存成文件，太方便了。</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/08/codepad2.jpg"><img decoding="async" loading="lazy" class="size-full wp-image-1311 aligncenter" title="codepad.org执行BT的hello world" src="https://coolshell.cn/wp-content/uploads/2009/08/codepad2.jpg" alt="codepad.org执行BT的hello world" width="604" height="401" srcset="https://coolshell.cn/wp-content/uploads/2009/08/codepad2.jpg 604w, https://coolshell.cn/wp-content/uploads/2009/08/codepad2-300x199.jpg 300w, https://coolshell.cn/wp-content/uploads/2009/08/codepad2-407x270.jpg 407w" sizes="(max-width: 604px) 100vw, 604px" /></a></p>
<p>。</p>
<p>(全文完)<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg" alt="API设计原则 &#8211; Qt官网的设计实践总结" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 &#8211; Qt官网的设计实践总结</a></li><li ><a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2013/02/linus_pointer_to_pointer-150x150.jpg" alt="Linus：利用二级指针删除单向链表" width="150" height="150" /></a><a href="https://coolshell.cn/articles/8990.html" class="wp_rp_title">Linus：利用二级指针删除单向链表</a></li><li ><a href="https://coolshell.cn/articles/8745.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/8.jpg" alt="如此理解面向对象编程" width="150" height="150" /></a><a href="https://coolshell.cn/articles/8745.html" class="wp_rp_title">如此理解面向对象编程</a></li><li ><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2012/07/muxnt-150x150.jpg" alt="代码执行的效率" width="150" height="150" /></a><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_title">代码执行的效率</a></li><li ><a href="https://coolshell.cn/articles/5444.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/14.jpg" alt="千万不要把 bool 设计成函数参数" width="150" height="150" /></a><a href="https://coolshell.cn/articles/5444.html" class="wp_rp_title">千万不要把 bool 设计成函数参数</a></li><li ><a href="https://coolshell.cn/articles/5201.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2011/08/538efefbjw1dt8f6ua5rpg-150x150.gif" alt="重构代码的7个阶段" width="150" height="150" /></a><a href="https://coolshell.cn/articles/5201.html" class="wp_rp_title">重构代码的7个阶段</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1310.html">在线代码编译服务Codepad.org</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1310.html/feed</wfw:commentRss>
			<slash:comments>26</slash:comments>
		
		
			</item>
		<item>
		<title>Code Review中的几个提示</title>
		<link>https://coolshell.cn/articles/1302.html</link>
					<comments>https://coolshell.cn/articles/1302.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Thu, 20 Aug 2009 15:49:49 +0000</pubDate>
				<category><![CDATA[技术读物]]></category>
		<category><![CDATA[流程方法]]></category>
		<category><![CDATA[Code Review]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1302</guid>

					<description><![CDATA[<p>Code Review应该是软件工程最最有价值的一个活动，之前，本站发表过《简单实用的Code Review工具》，那些工具主要是用来帮助更有效地进行这个活动，...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1302.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1302.html">Code Review中的几个提示</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script><img decoding="async" loading="lazy" class="alignright size-full wp-image-1303" title="Code Reivew" alt="Code Reivew" src="https://coolshell.cn/wp-content/uploads/2009/08/review.jpg" width="124" height="88" />Code Review应该是软件工程最最有价值的一个活动，之前，本站发表过《<a href="https://coolshell.cn/articles/1218.html" rel="bookmark">简单实用的Code Review工具</a>》，那些工具主要是用来帮助更有效地进行这个活动，这里的这篇文章，我们主要想和大家分享一下Code Review代码审查的一些心得。</p>
<p>首先，我们先来看看Code Reivew的用处：</p>
<ol>
<li>Code reviews 中，可以通过大家的建议增进代码的质量。</li>
<li>Code reviews  是一个传递知识的手段，可以让其它并不熟悉代码的人知道作者的意图和想法，从而可以在以后轻松维护代码。</li>
<li>Code reviews 也鼓励程序员们相互学习对方的长处和优点。</li>
<li>Code reviews 也可以被用来确认自己的设计和实现是一个清楚和简单的。</li>
</ol>
<p>你也许注意到了在上面的Code Reivew中的诸多用处中，我们没有提到可以帮助找到程序的bug和保证代码风格和编码标准。这是因为我们认为：</p>
<p><span id="more-1302"></span></p>
<ol>
<li><strong>Code reviews <span style="color: #993300;">不应该</span>承担发现代码错误的职责</strong>。Code Review主要是审核代码的质量，如可读性，可维护性，以及程序的逻辑和对需求和设计的实现。代码中的bug和错误应该由单元测试，功能测试，性能测试，回归测试来保证的（其中主要是单元测试，因为那是最接近Bug，也是Bug没有扩散的地方）</li>
<li><strong>Code reviews <span style="color: #993300;">不应该</span>成为保证代码风格和编码标准的手段</strong>。编码风格和代码规范都属于死的东西，每个程序员在把自己的代码提交团队Review的时候，代码就应该是符合规范的，这是默认值，属于每个人自己的事情，不应该交由团队来完成，否则只会浪费大家本来就不够的时间。我个人认为“meeting”是奢侈的，因为那需要大家在同一时刻都挤出时间，所以应该用在最需要的地方。代码规范比起程序的逻辑和对需求设计的实现来说，太不值得让大家都来了。</li>
</ol>
<p>10年前，上面这两件事会是理所当然的（10年前的中国的软件开发还没有Code Reivew呢），今天，在中国的很多公司上面这两件事依然被认为是Code Reivew最重要的事，所以，我能够看到很多开发Team抱怨Code Review就是一个形式，费时费力不说，发现的问题还不如测试，而评审者们除了在代码风格上有些见术，别的也就没什么用了，长而久之，大家都会开始厌烦这个事了。</p>
<p>所以，在今天，请不要把上面的那两件事分散了Code Review的注意力，取而代之的是，对于Bug，程序的作者要在Review前提交自己的单元测试报告（如：XUnit的测试结果），对于代码规范，这是程序作者自己需要保证的，而且，有一些工具是可以帮你来检查代码规范的。</p>
<p><strong>当然，上述这些言论并不是说，你不能在Code Review中报告一个程序的bug或是一个代码规范的问题。我只是说，那并不是Code Review的意图。</strong></p>
<p>下面是我们认为的几个小提示可以让你更好进行Code Review这项最有价值的活动。</p>
<h4>1.- 经常进行Code Review</h4>
<p>以前经历过几个相当痛苦的Code Review，那几次Code Review都是在程序完成的时候进行的，当你面对那近万行的代码，以前N多掺和在一起的功能，你会发现，整个Code Review变得非常地艰难，用不了一会儿，你就会发现大家都在拼命地打着哈欠，但还是要坚持，有时候，这样的Review会持续3个小时以上，相当的夸张。而且，会议上会出现相当多的问题和争论，因为，这就好像，人家都把整个房子盖好了，大家Review时这挑一点那挑一点，有时候触动地基或是承重墙体，需要大动手术，让人返工，这当然会让盖房的人一下就跳起来极力地维护自己的代码，最后还伤了团队成员的感情。</p>
<p>所以，千万不要等大厦都盖好了再去Reivew，而且当有了地基，有了框架，有了房顶，有了门窗，有了装修，的各个时候循序渐进地进行Review，这样反而会更有效率，也更有帮助。</p>
<p>下面是一些观点，千万要铭记：</p>
<ul>
<li><strong>要Review的代码越多，那么要重构，重写的代码就会越多。而越不被程序作者接受的建议也会越多，唾沫口水战也会越多。<br />
</strong></li>
<li><strong>程序员代码写得时候越长，程序员就会在代码中加入越来越多的个人的东西。</strong> 程序员最大的问题就是“自负”，无论什么时候，什么情况下，有太多的机会会让这种“自负”澎涨开来，并开始影响团队影响整个项目，以至于听不见别人的建议，从而让Code Review变成了口水战。</li>
<li><strong>越接近软件发布的最终期限，代码也就不能改得太多。</strong></li>
</ul>
<p>我个人的习惯，并且也是对团队成员的要求是——先Review设计实现思路，然后Review设计模式，接着Review成形的骨干代码，最后Review完成的代码，如果程序复杂的话，需要拆成几个单元或模块分别Review。当然，最佳的practice是，每次Review的代码应该在1000行以内，时间不能超过一部电影的时间——1.5小时（因为据说那个一个正常人的膀胱可以容纳尿液的最长限度）</p>
<p>当然，在敏捷开发中，他们不需要Code Reivew，其实，敏捷开发中使用更为极端的“结对编程”（Pair-Programming）的方法 —— 一种时时刻刻都在进行Code Review的方法，个人感觉在实际过程中，这种方法有点过了。另外，大家可以看看本站的另一篇文章《<a href="https://coolshell.cn/articles/16.html" rel="bookmark">结对编程的利与弊</a>》来了解一下这种方法的问题。</p>
<h4>2.- Code Review不要太正式，而且要短</h4>
<p>忘了那个代码评审的Checklist吧，走到你的同事座位跟前，像请师父一样请他坐到你的电脑面前，然后，花5分钟给他讲讲你的代码，给他另外一个5分钟让他给你的代码提提意见，这比什么都好。而如果你用了一个Checklist，让这个事情表现得很正式的话，下面两件事中必有一件事会发生：</p>
<ol>
<li>只有在Checklist上存在的东西才会被Review。</li>
<li>Code Reviews 变成了一种礼节性的东西，你的同事会装做很关心你的代码，但其实他心里想着尽快地离开你。</li>
</ol>
<p>只有不正式的Code Review才会让你和评审者放轻松，人只有放松了，才会表现得很真实，很真诚。记住Review只不过是一种形式，而只有在相互信任中通过相互的讨论得到了有意义和有建设性的建议和意见，那才是最实在的。不然，作者和评审者的关系就会变成小偷和警察的关系。</p>
<h4>3.- 尽可能的让不同的人Reivew你的代码</h4>
<p>这是一个好主意，如果可能的话，不要总是只找一个人来Review你的代码，不同的人有不同的思考方式，有不同的见解，所以，不同的人可以全面的从各个方面评论你的代码，有的从实现的角度，有的从需求的角度，有的从用户使用的角度，有的从算法的角度，有的从性能效率的角度，有的从易读的角度，有的从扩展性的角度……，啊，好多啊，还让不让人活了。不管怎么说，多找一些不同的人会对你很有好处。当然，不要太多了，人多嘴杂反而适得其反，基本上来说，不要超过3个人，这是因为，这是一个可以围在一起讨论的最大人员尺寸。</p>
<p>下面是几个优点：</p>
<ol>
<li>从不同的方向评审代码总是好的。</li>
<li>会有更多的人帮你在日后维护你的代码。</li>
<li>这也是一个增加团队凝聚力的方法。</li>
</ol>
<h4>4.- 保持积极的正面的态度</h4>
<p>再说一次，程序最大的问题就是“自负”，尤其当我们Reivew别人的代码的时候，我已经见过无数的场面，程序员在Code Review的时候，开始抨击别人的代码，质疑别人的能力。太可笑了，我分析了一下，这类的程序员其实并没有什么本事，因为他们指责对方的目的是想告诉大家自己有多么的牛，靠这种手段来表现自己的程序员，其实是就是传说中所说的“半瓶水”。</p>
<p>所以，无论是代码作者，还是评审者，都需要一种积极向上的正面的态度，作者需要能够虚心接受别人的建议，因为别人的建议是为了让你做得更好；评审者也需要以一种积极的正面的态度向作者提意见，因为那是和你在一个战壕里的战友。记住，你不是一段代码，你是一个人！</p>
<h4>5.- 学会享受Code Reivew</h4>
<p>这可能是最重要的一个提示了，如果你到了一个人人都喜欢Code Reivew的团阿，那么，你会进入到一个生机勃勃的地方，在那里，每个人都能写出质量非常好的代码，在那里，你不需要经理的管理，团队会自适应一切变化，他们相互学习，相互帮助，不仅仅是写出好的代码，而且团队和其中的每个人都会自动进化，最关键的是，这个是一个团队。</p>
<p>（全文完）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/17757.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2017/04/IMG_7411-150x150.jpg" alt="如何重构“箭头型”代码" width="150" height="150" /></a><a href="https://coolshell.cn/articles/17757.html" class="wp_rp_title">如何重构“箭头型”代码</a></li><li ><a href="https://coolshell.cn/articles/11432.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2014/04/code_review-150x150.jpg" alt="从Code Review 谈如何做技术" width="150" height="150" /></a><a href="https://coolshell.cn/articles/11432.html" class="wp_rp_title">从Code Review 谈如何做技术</a></li><li ><a href="https://coolshell.cn/articles/4875.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2011/06/20110620115951113-150x150.gif" alt="一个空格引发的惨剧" width="150" height="150" /></a><a href="https://coolshell.cn/articles/4875.html" class="wp_rp_title">一个空格引发的惨剧</a></li><li ><a href="https://coolshell.cn/articles/1719.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2009/11/Rubber-Duck-150x150.jpg" alt="橡皮鸭程序调试法" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1719.html" class="wp_rp_title">橡皮鸭程序调试法</a></li><li ><a href="https://coolshell.cn/articles/1218.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2009/08/viewtopicdetail-150x150.png" alt="简单实用的Code Review工具" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1218.html" class="wp_rp_title">简单实用的Code Review工具</a></li><li ><a href="https://coolshell.cn/articles/2926.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2010/09/WTF_HTML51-150x150.jpg" alt="你准备使用 HTML 5 吗？" width="150" height="150" /></a><a href="https://coolshell.cn/articles/2926.html" class="wp_rp_title">你准备使用 HTML 5 吗？</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1302.html">Code Review中的几个提示</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1302.html/feed</wfw:commentRss>
			<slash:comments>39</slash:comments>
		
		
			</item>
		<item>
		<title>科技公司十大最愚蠢的错误</title>
		<link>https://coolshell.cn/articles/1295.html</link>
					<comments>https://coolshell.cn/articles/1295.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Wed, 19 Aug 2009 15:17:20 +0000</pubDate>
				<category><![CDATA[技术新闻]]></category>
		<category><![CDATA[轶事趣闻]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1295</guid>

					<description><![CDATA[<p>有一些史上最大的高科技公司的交易没有发生。有一些最有前途的产品和服务也没出现。为什么？因为这其中的人和公司当时都没有意识到是什么样的东西滑过了他们的手指，或者，...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1295.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1295.html">科技公司十大最愚蠢的错误</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script><span><img decoding="async" class="alignright" src="http://images.pcworld.com/news/graphics/170337-rearview_original.jpg" alt="Facebook in Yahoo's rear-view mirror" /></span>有一些史上最大的高科技公司的交易没有发生。有一些最有前途的产品和服务也没出现。为什么？因为这其中的人和公司当时都没有意识到是什么样的东西滑过了他们的手指，或者，他们只是简单地不能预知未来会发生什么。</p>
<p>如果事情还能再来一次，也许今天我们就不会看到Apple和Microsoft了，而且，Yahoo可能会成为世界上最大的搜索引擎，Google只能成为后者。你也许只能从施乐电脑上读这篇文章，从RealPod上听你最喜欢的频道。</p>
<p>人们都说“事后诸葛亮”（ hindsight is 20-20，20/20是最好的视力），如果真是这样的话，那么，我们的分析就是最精确的。下面是我们挑选的历史上十大科技类公司丢失机会的案例。</p>
<h2>1. Yahoo 错过 Facebook</h2>
<p>2006年，当时只有2年的Facebook还在只服务于一些学校内的社交网络。那个时候的MySpace就拥有了1亿用户，完全超过了Facebook的8百万用户。所以，当 <a href="http://www.wired.com/techbiz/startups/news/2007/09/ff_facebook" target="_blank">Yahoo 提出使用10亿美金购买 Mark Zuckerberg 的孩子</a> 时（其将近 <a href="http://www.newscorp.com/news/news_251.html" target="_blank">2005年 Rupert Murdoch 收购 MySpace 金额的两倍</a>）人们都对说Fackbook的老大说，“Take the money and run, Mark。”，事实上，时年23岁的扎克伯格也的确于2006年6月与雅虎达成了协议。</p>
<p><span id="more-1295"></span></p>
<p>然后，Yahoo发布了一些其糟糕的财政报告后，它的股价在一晚上就下跌了22%，当时Yahoo的CEO， Terry Semel，把购买价格下调到了8亿美金来购买Facebook，但被Mark Zuckerberg 拒绝，两个月后，Terry Semel 把收购价格提高到10亿美金，但那时已经太晚了。</p>
<p>今天，Facebook已经扩大到了2亿5千万的注册用户，并且，它目前 <a href="https://coolshell.cn/article/165524/update_facebook_gets_200_million_in_cash.html">值大约从 50亿美金 到100亿美金间的一个价格</a> （主要看谁来计算） 。而我们的Yahoo三年过去了，换了两个CEO，今天还在生存线上挣扎。</p>
<p> </p>
<h2>2. Real Networks 丢弃 iPod</h2>
<p><img decoding="async" class="alignright" src="http://images.pcworld.com/news/graphics/170337-tonyfadell-applebiopic_180.jpg" alt="Tony Fadell, inventor of the iPod" />人们以为Steve Jobs 发明了iPod，但实际他没有，这是真的。Steve Jobs 只不过对一个因为<a href="http://www.historyofthings.com/history-of-the-ipod" target="_blank">Real Network没有采纳想法</a>的而离职的工程师Tony Fadell 说了“Yes”，而这个想法就是2000年秋天的一种全新音乐播放器（Tony Fadell 以前的同事 Philips 同样拒绝了Tony的这个新想法）。</p>
<p>虽然 MP3 播放器已经出现很多看了，但是 <a href="https://coolshell.cn/article/167123-4/fathers_of_technology_10_unsung_heroes.html">Fadell 的理念</a> 有一些小小的不同，他注重的是：更小，更精巧，并且专注于一个音乐的内容系统，这样，能够让音乐爱好者们很容易的填满他们的播放器——“pods” （Steve Jobs 则是最著名的驱动 iPod设计的人）</p>
<p>今天，那个专注于音乐内容的系统叫iTunes，并且，Apple公司控制了80%的数字音乐的市场。 Fadell 在Apple的 iPod 事业部工作，不过最终于2008年11月离开了那里。Real Networks 今天还在继续他的流媒体，但它的利润已被被iTunes冲得肢离破碎了。（照片是Tony Fadell)</p>
<h2>3. 索尼和东芝HD 的纷争</h2>
<p><span><img decoding="async" class="alignleft" src="http://images.pcworld.com/news/graphics/170337-blu-ray_disc2_180.jpg" alt="HD DVD versus Blu-ray" />为了争夺一个新的 <a href="https://coolshell.cn/article/142584/hd_dvd_vs_bluray_disc_a_history.html">高清晰光盘标准</a>，几年来，在格式上的这场争夺战中，参与者各方已付出了很昂贵的成本。在拳击台上的一角落里，站着Sony支持的蓝光</span>（Blu-ray），而另一个角落，站着Toshiba支持的 HD DVD。</p>
<p>自从2002 开始，双方就开始争夺不休，各自的所签署的联盟阵营也只支持自己的互不兼容的格式。在2008 年，Sony 的刀刃插入了Toshiba的胸膛，让Toshiba停止了HD DVD的生产，2009年8月12日宣布正式加入蓝光阵营，Toshiba 反而成了蓝光这边最大的一个支持者之一， <a href="http://blogs.pcworld.com/staffblog/archives/006159.html">华纳兄弟也花费了4亿美金宣布放弃HD DVD并加入蓝光阵营</a>。</p>
<p>有趣的是，在上世纪90年代中期，这对冤家同样为电影的HR格式争斗，那个时候，当时双方搁置争议，把两边的最好的东西整合起来，成为了一个叫做 Digital Versatile Disc的东西，被人们简称DVD。</p>
<p>这样一个事情，让多年参与HD格式之争的公司门损失惨重。如果在2002年，两边联手，HD光盘可能会在今天的电影和电视节目光盘中占有统治地位，然而，双方的争斗导致了成本的上升，和在市场上错失良机，今天，DVD卖得比蓝光还要多，基本上是10:1的样子，但是未来将会属于流媒体的视频点播。</p>
<h2>4. Digital Research：另一个Microsoft</h2>
<p><span><img decoding="async" class="alignright" src="http://images.pcworld.com/news/graphics/170337-kildalltradingcard_180.jpg" alt="Gary Kildall, Digital Research" />这是一个经典案例。在</span> 1980 年，当时的IBM正在寻找一些人为IBM的PC机做一个操作系统，当时的 Microsoft 并不是第一选择。当初的比尔·盖茨(Bill Gates)建议IBM与Digital Research的加里·基尔代尔(Gary Kildall)合作，后者也是 CP/M 操作系统的作者。</p>
<p>传说，Kildall甩了IBM要单飞。但实际上是kildall接了另一个客户的订单去做另一个产品，仅让他自己的妻子和IBM谈判。 <a href="http://www.cadigital.com/kildall.htm" target="_blank">Dorothy Kildall ——他的妻子并不喜欢IBM的一些条款</a>，所以和IBM的合作也流产了。</p>
<p>蓝色巨人只好回头找了Bill Gates和他的搭档Paul Allen，他们开发了MS-DOS，这是基于 Tim Paterson 的 QDOS （全称是the Quick and Dirty Operating System）, QDOS则是基于Gary Kildall的CP/M操作系统。 最后IBM提供了 Microsoft 的 DOS (售价$60) 和某版本的CP/M (售价$240) 给IBM PC的买家做选择，最后，便宜的产品获得了胜利。</p>
<p>在DOS以前，Microsoft 最大的产品是 BASIC 编程工具。而在 DOS以后，是的，你知道这个公司干了什么。Microsoft 今天的成就是否和IBM的那个合同有关？我们永远也无法知道。也许，像Bill这样的人始终都能把握住这样的机会，而Gary则不能。</p>
<h2>5. Xerox 错失 Alto 良机</h2>
<p><span><img decoding="async" class="alignright" src="http://images.pcworld.com/news/graphics/170337-xerox_alto-wikimeda_180.jpg" alt="The Xerox Alto (Courtesy of Wikimedia)" />这也是另一个经典的故事。二十年前，在</span>Macintosh 和Windows PC之前，甚至在MITS Altair之前，已经存于 Alto，这是这个世界上第一个基于窗口图形界面的电脑（关于图形化的操作系统，大家可以看看这篇文章《<a title="操作系统图形界面发展史(1981-2009) - 1,632 次浏览" href="https://coolshell.cn/articles/105.html">操作系统图形界面发展史(1981-2009)</a>》）， 由<a href="https://coolshell.cn/article/115194/meet_the_movers_behind_the_first_pc.html">Xerox PARC</a>发明， Alto 有鼠标，支持以太网络，以及所见即所得的WYSIWYG文本处理器。</p>
<p>但是1973 年的“个人电脑”市场并不存在，所以 Xerox 并不知道Alto的潜力，也不知道如何处理它。这个公司制造了几千个这要电脑并把它们分发到了各个大学中。江湖上传闻，1979年的时候，当 Steve Jobs 参观Xerox PARC的时候，看到了Alto，回去后，把那些 <a href="https://coolshell.cn/article/114418/the_mac_turns_20.html">许许多多的 Alto 的特性</a> 集成到了 Apple 的 Lisa 和Mac 电脑上。从那以后， Xerox 终于意识到了它的错误，然后把开始了 Xerox Star 的市场营销，Xerox Star是一个图形工作站，其基于Alto的技术。但是已经太晚了，太晚了。</p>
<p> </p>
<h2>6. 唱片业的一错再错</h2>
<p><span><img decoding="async" class="alignright" src="http://images.pcworld.com/news/graphics/170337-napster-logo-1999_180.jpg" alt="Napster logo" /></span>也许，没有哪个产业比音乐产业更能错过机会。</p>
<p>在1999年，Shawn Fanning 的 Napster 创造了一个难以置信的一个让大容易共享音乐的在线平台。然后， <a href="https://coolshell.cn/article/17839/judge_in_napster_case_finds_in_favor_of_music_companies.html">唱片公司们开始集体控诉Napster</a> ，侵害了他们的版权。然后，Napster 的 CEO Hank Barry 提倡音乐产业 <a href="http://iml.jou.ufl.edu/projects/Spring01/Burkhalter/hank's%20statement.html" target="_blank">采用那种电台广播的许可证协议</a> ，对通过网络传播音乐的人征收版税，可是他的这个倡议遇到了聋子的耳朵——无人响应。</p>
<p>于是，Napster 的粉丝们非常快地跑到了其它的P2P的文件共享网络，如Gnutella 和Grokster，于是盗版音乐也成了RIAA（<span>美国唱片业协会</span>）的头号敌人。</p>
<p>在2000年，MP3.com 启动了一个服务可以允许会员们上传歌曲到自己的私有的CD收集中，并且可以以流的方式传播到每一个PC上。再次， <a href="https://coolshell.cn/article/35165/mp3com_faces_new_litigation_days_after_settlement.html">唱片行业控告 MP3.com 侵权</a>， 最终导致了 MP3.com 被迫出售，并被迫更改了其商业模式。</p>
<p>再加上 <a href="https://coolshell.cn/article/64546/filesharing_services_sued.html">RIAA 对 Grokster, Morpheus,</a> Kazaa, 和其它30,000 盗版单曲的指控，其它唱片行业损失了很多商业机会。</p>
<p>当然，今天的音乐订阅业务和流媒体服务，诸如 Pandora 支配了数字音乐界，唱片公司也开始和网络公司签了协议。试想一样，如果唱片公司们和 Napster， MP3.com，或是其它一些网络共享者合作，而不是去指控他们，也许，这些唱片公司今天将会控制着数字音乐——而且不会有任何盗版的问题。</p>
<h2>7. Compuserve 错过了主宰网络的机会</h2>
<p><span><img decoding="async" class="alignright" src="http://images.pcworld.com/news/graphics/170337-compuservepin-comdex1995_180.jpg" alt="CompuServe logo" />看看今天的交互式应用，社区媒体式的，用户原创内容驱动式的（UGC），你看到了什么？一个1994年几乎完美版本的</span> CompuServe。但是，几乎主宰在线世界的 CompuServe 的屁股被AOL仅以AOL有500亿的免费CD踢得开了花。</p>
<p>在上世纪90年代初， Compuserve Information Service 有着“令人难以置信的优势：一个坚定的客户基础，难以置信的对客户的使用模式分析的数据，一个难以复制的知识仓库，几乎没有竞争的环境”， Kip Gregory，一个管理顾问， <a href="http://www.winningclients.com/" target="_blank">Winning Clients in a Wired World</a> 一书的作者，说，“可能缺少的是……把这些优势都转变成可持续的领先的投入”。</p>
<p>于是，AOL 来了，提供了一种“不限时的”统一费用，而 CompuServe 则是按小时充值，AOL提供了一个简单的界面，以及大规模，地毯式轰炸营销活动——为每位用户提供一张免费的CD。在CompuServe论坛上早期出现的组织纷纷转到了AOL的Web上，而CompuServe论坛对Web支持的不是很好。1997年，<a href="https://coolshell.cn/article/4512/aol_buying_compuserve_users_voice_opinions_about_possible_takeover.html">AOL 获得了 CompuServe</a>, 并且，<a href="https://coolshell.cn/businesscenter/article/167903/farewell_compuserve_rip.html">&#8220;CompuServe classic&#8221; 服务最终在同年6月安息了</a> 。</p>
<p>CompuServe 失败不是错过了一个机会，而是错过了一堆， Gregory说，“我真的相信 CompuServe是一个非常重要的示例，这也是一个非常重要的教训——永远不要因为优势就裹足不前”。</p>
<h2>8. 报业错过网络分类广告业务&#8211;Craigslist</h2>
<p><span><img decoding="async" class="alignright" src="http://images.pcworld.com/news/graphics/170337-craigslist_180.jpg" alt="Craigslist.org" />报纸正在死亡，并且，几乎的所有的帐户（当然，所有的报纸帐户），</span> Craigslist 的的触角却延伸到各个地方的触角却延伸到各个地方，甚至可以在所有的犯罪现场被找到。 大家认为报纸的衰落是因为在线的免费的分类广告服务，这让很多行业的利润都极大的缩水，其中一个就是新闻报纸行业的那些“现金牛”(指现金净收入极大的项目,如沃尔玛超市)。</p>
<p>2005年，全美报业分类广告的年收入总额为173亿美元。。从那以后，像Craigslist 这样使用分类广告的网站（如：Amazon, eBay, 和Google）几乎番了一番，根据 <a href="http://pewinternet.org/Reports/2009/7--Online-Classifieds.aspx?r=1" target="_blank">Pew研究中心</a>的报告，报业的分类广告的利润却减少了一半。</p>
<p>如果回到2005年，那段报业分类广告利润很高的时候，如果某个报业集团收买了Craigslist，那么今天可能会非常地不一样。当然，首先他们将不得不说服Craigslist的创始人Craig Newmark出售。</p>
<p>在<a href="https://coolshell.cn/article/141991/craigslist_founder_talks_about_open_source_banner_ads.html">2008 年1月InfoWorld的采访中</a>，Newmark 说他的公司的角色在报纸行业瓦解中被报纸行业大大地夸大了，“我认为报纸最大的问题是需要去检查他们自己”他注解道。</p>
<h2>9. Google 之前的 Google</h2>
<p><span><img decoding="async" class="alignright" src="http://images.pcworld.com/news/graphics/170337-opentextlogo2009_180.gif" alt="Open Text, an early search engine" />在上世纪90年代中期，最热的搜索引擎不是Yahoo，不是</span> Alta Vista，不是 Lycos，也不是 Hot Wired，而是Open Text Web 索引。它和今天的Google 非常像，Open Text 以其速度，准确性和全面性著称，这个搜索引擎于1995 年由Open Text 公司宣称，其<a href="http://www.allbusiness.com/technology/software-services-applications-search-engines/7135767-1.html" target="_blank">索引了当时Web上大约5百万个页面上的每一个单词 </a>。那年 Yahoo 在其目录中集成了Open Text 的搜索技术。</p>
<p>但是其和Yahoo合作两看后， Open Text 放弃了搜索而转移到企业级的内容管理方向上。一年以后，<a href="http://www.google.com/corporate/history.html" target="_blank">Google 才初次登场</a>。Open Text又是和机遇错过了，没有意识到搜索会变得有多大。</p>
<p>“如果 Open Text 有什么事是比较特殊的，那就是他们比任何人都有和Google很相近的技术”， Steve Parker（一个帮助Yahoo启动Open Text搜索技术的通讯顾问）说， “它比Google早三年进入市场，所以Google不得不为了以更快的速度发展而使劲烧钱，并且，Google也不一定有足够的时间去成为市场的领导者。如果当初不是那样，也许，今天的山大王将会是Open Text ”。</p>
<h2>10. Microsoft 拯救正在腐烂的苹果</h2>
<p><span><img decoding="async" class="alignright" src="http://images.pcworld.com/news/graphics/170219-apple_old_logo_original.jpg" alt="Early Apple logo" />10年前，当Apple正处理严重的危机中。</span> Mac 的销售正在被Power Computing 和 Radius更便宜的山寨机复制时。整个公司动作在非常低的现金流中，苹果的股票跌到每股$5，并且，他们正在寻找新的CEO来取代 Gil Amelio。</p>
<p>后来，Apple 收到了一大笔急需的现金注入——1亿5千万美金——从一个看上去不可能的源头： <a href="https://coolshell.cn/article/5156/microsoft_to_invest_in_apple_jobs_ellison_on_board.html">Microsoft，还承诺继续开发Mac Office 套件</a>。这个交易由Apple的顾问Steve Jobs 和Microsoft商议而成，这一宣布曾经在Macworld Expo 博览会上被苹果的铁杆粉丝们暴以嘘声。这后，Steve Jobs成为了Apple的实习CEO。后面，我们都知道发生了什么。</p>
<p>如果Microsoft 当时没有 <a href="https://coolshell.cn/businesscenter/article/169752/1997_steve_jobs_was_wrong_and_microsoft_saved_apple.html">错过让苹果凋谢的这个机会</a>？我们可能会要在WinPhones上使用WinTunes而苦苦挣扎。在线的音乐和视频可能会停滞，或是更坏，被好莱坞控制着。而且，我们会因为没有Windows的另一个选择而长期地失望下去。这恐怕是唯一一个大家受益的“失误”了。</p>
<p style="TEXT-ALIGN: center"><img decoding="async" src="http://images.pcworld.com/news/graphics/170337-youngstevejobs_original.jpg" alt="A young Steve Jobs" />   <br />
年青的Steve Jobs</p>
<p>文章：<a href="http://www.pcworld.com/article/170337/the_10_stupidest_tech_company_blunders.html" target="_blank">来源</a>（PCWorld）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/11629.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/2.jpg" alt="「我只是认真」聊聊工匠情怀" width="150" height="150" /></a><a href="https://coolshell.cn/articles/11629.html" class="wp_rp_title">「我只是认真」聊聊工匠情怀</a></li><li ><a href="https://coolshell.cn/articles/559.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/1.jpg" alt="菜鸟学PHP之Smarty入门" width="150" height="150" /></a><a href="https://coolshell.cn/articles/559.html" class="wp_rp_title">菜鸟学PHP之Smarty入门</a></li><li ><a href="https://coolshell.cn/articles/22422.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2023/05/monolith.microservices-150x150.png" alt="是微服务架构不香还是云不香？" width="150" height="150" /></a><a href="https://coolshell.cn/articles/22422.html" class="wp_rp_title">是微服务架构不香还是云不香？</a></li><li ><a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2013/02/linus_pointer_to_pointer-150x150.jpg" alt="Linus：利用二级指针删除单向链表" width="150" height="150" /></a><a href="https://coolshell.cn/articles/8990.html" class="wp_rp_title">Linus：利用二级指针删除单向链表</a></li><li ><a href="https://coolshell.cn/articles/2492.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/21.jpg" alt="WTF Javascript" width="150" height="150" /></a><a href="https://coolshell.cn/articles/2492.html" class="wp_rp_title">WTF Javascript</a></li><li ><a href="https://coolshell.cn/articles/3270.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2010/11/Learn-Python-The-Hard-Way-150x150.jpg" alt="两本电子书" width="150" height="150" /></a><a href="https://coolshell.cn/articles/3270.html" class="wp_rp_title">两本电子书</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1295.html">科技公司十大最愚蠢的错误</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1295.html/feed</wfw:commentRss>
			<slash:comments>8</slash:comments>
		
		
			</item>
		<item>
		<title>Linus Torvalds 语录 Top 10</title>
		<link>https://coolshell.cn/articles/1278.html</link>
					<comments>https://coolshell.cn/articles/1278.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Sun, 16 Aug 2009 06:56:25 +0000</pubDate>
				<category><![CDATA[Unix/Linux]]></category>
		<category><![CDATA[轶事趣闻]]></category>
		<category><![CDATA[Linus Torvalds]]></category>
		<category><![CDATA[Linux]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1278</guid>

					<description><![CDATA[<p>下面是Linux的创始人Linus Torvalds的一些言论，这是我个人认为最有意思的10句。如果你想看更多的Linus Torvalds说过的话，你可以看看...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1278.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1278.html">Linus Torvalds 语录 Top 10</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script><img decoding="async" loading="lazy" class="alignright" title="linus torvalds" src="https://coolshell.cn/wp-content/uploads/2009/08/linus_torvalds_talking.jpg" alt="linus torvalds" width="144" height="218" />下面是Linux的创始人Linus Torvalds的一些言论，这是我个人认为最有意思的10句。如果你想看更多的Linus Torvalds说过的话，你可以看看他在维基百科上的词条：<a href="http://en.wikiquote.org/wiki/Linus_Torvalds" target="_blank">Linux Torvalds</a>。我们在下面给出中英文对照，希望你能喜欢。</p>
<blockquote><p>“Really, I’m not out to destroy Microsoft. That will just be a completely unintentional side effect ” （真的，我并不是想要干掉Microsoft，如果真是那样了，那完全是一个无意的副作用）——&#8221;The Way We Live Now: Questions for Linus Torvalds&#8221;, 接受《New York Times》的采访， 2003-09-28.</p></blockquote>
<blockquote><p>“Only wimps use tape backup: _real_ men just upload their important stuff on ftp, and let the rest of the world mirror it”（只有愚昧的人才会用磁带来做备份，真正聪明的人会上传他们最重要的东西到FTP服务器上，而剩下事情是，让世界各地的人来镜像这些东西）——(1996-07-20). <a title="http://groups.google.com/groups?selm=Pine.LNX.3.91.960720095713.20645F-100000%40linux.cs.Helsinki.FI" rel="nofollow" href="http://groups.google.com/groups?selm=Pine.LNX.3.91.960720095713.20645F-100000%40linux.cs.Helsinki.FI">在linux.dev.kernel 新闻组上的一个贴子</a></p></blockquote>
<p><span id="more-1278"></span></p>
<blockquote><p>“Software is like sex; it’s better when it’s free.” （软件就像是性一样，仅当是自由的时候才会更好）—— 1996 的FSF 大会， <a title="http://www.argentilinux.com.ar/doku.php/linux_videos_documentales:the_code_linux" rel="nofollow" href="http://www.argentilinux.com.ar/doku.php/linux_videos_documentales:the_code_linux">相关视频</a>。</p></blockquote>
<blockquote><p>“Is “I hope you all die a painful death” too strong?”（“我希望你们所有人在痛苦中死去”这句话是不是太强硬啦？）——这句话是，Linus是在拒绝某些硬件产商想在Linux的内核中植入特定的硬件处理程序，对那些硬件产商说的。</p></blockquote>
<blockquote><p>“Most days I wake up thinking I’m the luckiest bastard alive.”（很多天当我醒来的时候，我想到我是世界上最幸运的还活着的混蛋）—— <cite id="CITEREFTorvalds.2C_Linus_and_David_Diamond2001" style="font-style: normal;">Linus  <cite id="CITEREFTorvalds.2C_Linus_and_David_Diamond2001" style="font-style: normal;">Torvalds </cite>和David Diamond (2001). <em>Just for Fun: The Story of an Accidental Revolutionary.</em></cite></p></blockquote>
<blockquote><p>“An infinite number of monkeys typing into GNU emacs would never make a good program.” （即使是无穷多个猴子在GNU的emacs中输入东西，那也不会写出一段好的程序）—— 出自 <a title="http://www.linuxhq.com/kernel/v1.3/53/Documentation/CodingStyle" rel="nofollow" href="http://www.linuxhq.com/kernel/v1.3/53/Documentation/CodingStyle">Linux 1.3.53 编程风格</a></p></blockquote>
<blockquote><p>“Talk is cheap. Show me the code.”（能说算不上什么，有本事就把你的代码给我看看）—— 2000-08-25， <a title="http://lkml.org/lkml/2000/8/25/132" rel="nofollow" href="http://lkml.org/lkml/2000/8/25/132">给linux-kernel 邮件列表的一封邮件</a></p></blockquote>
<blockquote><p>“I’m a bastard. I have absolutely no clue why people can ever think otherwise. Yet they do. People think I’m a nice guy, and the fact is that I’m a scheming, conniving bastard who doesn’t care for any hurt feelings or lost hours of work, if it just results in what I consider to be a better system. And I’m not just saying that. I’m really not a very nice person. I can say “I don’t care” with a straight face, and really mean it.” （我是一个混蛋。我完全不知道人们为什么会从另外一个角度来看我，但是他们确实是（那么做的）。人们认为我是个好人，但事实上我是个诡计多端的混蛋，只要最终能得到我所认为的更好的系统，那么我对任何感情的伤害或工作时间的损失都不在乎。我并不只是（在口头上）说说而已，我真的不是一个很好的人。我能面无表情地说“我不在乎”，而且我确实不在乎。）—— 2000-09-06，<a title="http://lkml.org/lkml/2000/9/6/65" rel="nofollow" href="http://lkml.org/lkml/2000/9/6/65">给 linux-kernel 邮件列表的邮件</a></p></blockquote>
<blockquote><p>“Those that can, do. Those that can’t, complain.”（那些能做的人就做，不能做的人就只会抱怨）——2003-09-23， <a title="http://kerneltrap.org/node/901" rel="nofollow" href="http://kerneltrap.org/node/901">给Linux Kernel 邮件列表</a> （注意：Linus只是借用了一下这个句型，这个引言的原创在<a href="http://shlomif.livejournal.com/39215.html" target="_blank">这里</a>）</p></blockquote>
<blockquote><p>“You see. I don’t think any new thoughts. I think thoughts that other people have thought, and I rearrange them. But Sara, she thinks thoughts that never were before.”（您看，我没有任何新的想法。我的想法都是别人已经想过的，而我只是去重新组织一下别人的想法。但是莎拉不一样，她的想法是从来没有人想过的）—— 这是Linus给和他的母亲说起他的姐姐Sara。</p></blockquote>
<p>维基百科上的“<a href="http://en.wikiquote.org/wiki/Linus_Torvalds" target="_blank">Linus Torvald 词条</a>”上有很多他的语录，你不妨去看看，你喜欢哪些呢？<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/9917.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/10.jpg" alt="Alan Cox：大教堂、市集与市议会" width="150" height="150" /></a><a href="https://coolshell.cn/articles/9917.html" class="wp_rp_title">Alan Cox：大教堂、市集与市议会</a></li><li ><a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2013/02/linus_pointer_to_pointer-150x150.jpg" alt="Linus：利用二级指针删除单向链表" width="150" height="150" /></a><a href="https://coolshell.cn/articles/8990.html" class="wp_rp_title">Linus：利用二级指针删除单向链表</a></li><li ><a href="https://coolshell.cn/articles/2322.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2010/04/o_unixrichiethompson-150x150.jpg" alt="Unix传奇(上篇)" width="150" height="150" /></a><a href="https://coolshell.cn/articles/2322.html" class="wp_rp_title">Unix传奇(上篇)</a></li><li ><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2022/12/eBPF-150x150.jpeg" alt="eBPF 介绍" width="150" height="150" /></a><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_title">eBPF 介绍</a></li><li ><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2019/03/linux.ninja_-150x150.png" alt="打造高效的工作环境 &#8211; Shell 篇" width="150" height="150" /></a><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_title">打造高效的工作环境 &#8211; Shell 篇</a></li><li ><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2018/12/docker-networking-1-150x150.png" alt="记一次Kubernetes/Docker网络排障" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_title">记一次Kubernetes/Docker网络排障</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1278.html">Linus Torvalds 语录 Top 10</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1278.html/feed</wfw:commentRss>
			<slash:comments>40</slash:comments>
		
		
			</item>
		<item>
		<title>Linux基金会的广告</title>
		<link>https://coolshell.cn/articles/1283.html</link>
					<comments>https://coolshell.cn/articles/1283.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Sun, 16 Aug 2009 06:00:48 +0000</pubDate>
				<category><![CDATA[Unix/Linux]]></category>
		<category><![CDATA[轶事趣闻]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[广告]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1283</guid>

					<description><![CDATA[<p>今年早些时候，Linux基金会发起了一项面向制作人和一般Linux爱好者的活动，创造60秒创意的广告并评奖。 Linux基金会并没有苹果和微软这样大的投入来聘请...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1283.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1283.html">Linux基金会的广告</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script><strong>今年早些时候，Linux基金会发起了一项面向制作人和一般Linux爱好者的活动，创造60秒创意的广告并评奖。</strong></p>
<p>Linux基金会并没有苹果和微软这样大的投入来聘请大腕，但这次评选出来的好广告却一点也不输于他们，Linux社团的参与力和灵感可见一斑。<strong>本次活动获胜的奖品是免费前往东京参与Linux专题研讨会，评奖结果是：</strong></p>
<p>第一：“<a title="What does it mean to be free?" href="http://video.linuxfoundation.org/video/1106" target="_blank">What does it mean to be free?</a>”<br />
第二：“<a title="The Origin" href="http://video.linuxfoundation.org/video/1262" target="_blank">The Origin,</a>”<br />
第三：“<a title="Linux pub" href="http://video.linuxfoundation.org/video/1154" target="_blank">Linux pub</a>”</p>
<p> 下面是广告片的视频</p>
<p><span id="more-1283"></span></p>
<h4>What does it mean to be free?</h4>
<p><object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="420" height="363" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="wmode" value="opaque" /><param name="src" value="http://www.tudou.com/v/6ftVf_bMxg0" /><param name="allowfullscreen" value="true" /><embed type="application/x-shockwave-flash" width="420" height="363" src="http://www.tudou.com/v/6ftVf_bMxg0" allowfullscreen="true" allowscriptaccess="always" wmode="opaque"></embed></object><br />
 </p>
<h4>The Origin (起源)</h4>
<p><object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="480" height="400" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="align" value="middle" /><param name="src" value="http://player.youku.com/player.php/sid/XODQ3NjM5ODQ=/v.swf" /><param name="quality" value="high" /><embed type="application/x-shockwave-flash" width="480" height="400" src="http://player.youku.com/player.php/sid/XODQ3NjM5ODQ=/v.swf" quality="high" align="middle"></embed></object></p>
<h4>Linux Pub</h4>
<p>下面的视频需要你能够访问YouTube（你可以上Google搜索如何访问YouTube的方法）<br />
<object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/xceiMJSunIg&#038;hl=en&#038;fs=1&#038;"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/xceiMJSunIg&#038;hl=en&#038;fs=1&#038;" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></embed></object></p>
<p>还有很多很不错的作品，比如：</p>
<ul>
<li><a href="http://video.linuxfoundation.org/video/1271" target="_blank">The Future is Open</a></li>
<li><a href="http://video.linuxfoundation.org/video/1261">Challenges at the Office</a></li>
</ul>
<p>更多的视频，你可以上Linux基金会的网站上看看，也一样地非常地有创意。</p>
<p><a href="http://video.linuxfoundation.org/category/video-category/-linux-foundation-video-contest" target="_blank">http://video.linuxfoundation.org/category/video-category/-linux-foundation-video-contest</a></p>
<p>（全文完）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2022/12/eBPF-150x150.jpeg" alt="eBPF 介绍" width="150" height="150" /></a><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_title">eBPF 介绍</a></li><li ><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2019/03/linux.ninja_-150x150.png" alt="打造高效的工作环境 &#8211; Shell 篇" width="150" height="150" /></a><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_title">打造高效的工作环境 &#8211; Shell 篇</a></li><li ><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2018/12/docker-networking-1-150x150.png" alt="记一次Kubernetes/Docker网络排障" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_title">记一次Kubernetes/Docker网络排障</a></li><li ><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg" alt="程序员练级攻略（2018)  与我的专栏" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018)  与我的专栏</a></li><li ><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2017/07/systemd-1-150x150.jpeg" alt="Linux PID 1 和 Systemd" width="150" height="150" /></a><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_title">Linux PID 1 和 Systemd</a></li><li ><a href="https://coolshell.cn/articles/17416.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2016/07/cache-150x150.png" alt="缓存更新的套路" width="150" height="150" /></a><a href="https://coolshell.cn/articles/17416.html" class="wp_rp_title">缓存更新的套路</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1283.html">Linux基金会的广告</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1283.html/feed</wfw:commentRss>
			<slash:comments>12</slash:comments>
		
		
			</item>
		<item>
		<title>操作系统航空公司</title>
		<link>https://coolshell.cn/articles/1272.html</link>
					<comments>https://coolshell.cn/articles/1272.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Sun, 16 Aug 2009 04:54:24 +0000</pubDate>
				<category><![CDATA[操作系统]]></category>
		<category><![CDATA[轶事趣闻]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Mac]]></category>
		<category><![CDATA[OS X]]></category>
		<category><![CDATA[Unix]]></category>
		<category><![CDATA[Windows]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1272</guid>

					<description><![CDATA[<p> 我们知道，不同的操作系统有不同的系统，不同的风格，那么，如果操作系统和航空公司，会是怎么样的一种情况？让我们尝试地来做这样一个幽默的类比，把操作系统的特点带到...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1272.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1272.html">操作系统航空公司</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script><img decoding="async" loading="lazy" class="alignright size-full wp-image-1276" title="Linux 航空公司" src="https://coolshell.cn/wp-content/uploads/2009/08/linux_airline.jpg" alt="Linux 航空公司" width="240" height="180" /> 我们知道，不同的操作系统有不同的系统，不同的风格，那么，如果操作系统和航空公司，会是怎么样的一种情况？让我们尝试地来做这样一个幽默的类比，把操作系统的特点带到航空公司，让我们看看会是怎么样的一个情况。</p>
<p><strong>UNIX Airways</strong></p>
<p>Unix航空公司需要每一个人在乘机的时候带上一个飞机零件，他们会在飞机跑道上把飞机的这些零件一片一片地组装起来，然后，在不停地争论着倒底是要建造什么样的飞机。是AIX，还是Solaris？是FreeBSD还是HP-UX？……</p>
<p><strong>Air DOS</strong></p>
<p>DOS 航空公司的飞机需要每一位乘客在后面推飞机直到飞机开始滑行，然后他们跳上飞机并且跟着飞机一起沿着海岸滑行直至飞机再次掉到地面，然后乘客们再次推动飞机，然后跳上飞，如此循环不止……</p>
<p><span id="more-1272"></span></p>
<p><strong>Mac Airlines</strong></p>
<p>Mac航空公司中，所有的乘务员，机长，行李搬运工，和机票代理无论是看上去还是行为上都是完全一致的。每次当你询问细节的时候，他们都会很绅士地但很坚定地告诉你，你不需要知道那么多的细节，也没有必要知道，所有一切的事情都已经在你不需要知道的情况下完成了，所以，你只需要shut up。</p>
<p><strong>Windows Air</strong></p>
<p>Windows航空公司的航站楼是那么的漂亮和多彩，并且有非常友好的乘务员，相当简单的行李和乘机手续，同样平滑的离站程序。但是，当飞机起飞10分钟后，通常飞机会在没有任何警告的情况下就爆炸了。</p>
<p><strong>Windows NT Air</strong></p>
<p>Windows NT航空公司和Windows航空公司一样，但是他的成本更高，使用更大型的飞机，并且当其爆炸的时候，你可以换乘在40英里半径内的其它飞行器。</p>
<p><strong>Windows XP Air</strong></p>
<div id="result_box" style="TEXT-ALIGN: left" dir="ltr">您所在的这个机场，根据合同，只允许乘坐XP的航空飞机。所有的飞机是相同的，明亮的色彩，以及比原来的需要大3倍。XP航空公司的标志是巨大的，并都指向相同的方向。无论你走哪一条路，有些身穿斗篷和戴着尖角帽子的人会坚持地跟着你走。你的行李和衣物都会被拿走并被XP航空套装和相同的XP手提箱所取代，你周围的人都和你有一样套装和手提箱，当然，这些东西的成本都会包含在机票中。如果你不签合，飞机不会起飞。飞机途中的娱乐表演承诺和实际是一样的，那就是米老鼠动画片会一遍一遍地播放。在你需要吃东西喝饮料的前，你不得不先打电话给你的旅行社。在整个航行过程中你都被会搜索。如果你去厕所两次以上，你得再补一张票。无论你所预订的目的地是哪里，你永远都会最终被迫降在加拿大的惠斯勒（Whistler）。</div>
<p><strong> OS X Air</strong></p>
<p>你进入了一个白色的航站楼，你所能看到的是一个坐在角落白桌子后面的一位女士，你走上去取你的机票。她微笑地对你说，“欢迎乘座OS X航空公司，请您允许我给您照张相”，她一边指向了在墙上你没注意到的已经给你拍了照的照相机，一边对你说，“谢谢，这是您的机票”。一张最少上面有你照片的机票被递到了你的手上，上面已经有了你所有的信息。你右边的一扇门打开了，你走了进去，你看到了一个很宽敞的空间，只有一个座位在中间，你坐下，听着音乐，看着电影，直到飞行结束。你自始至终都不会看到其它的乘客。当你登陆下机的时候，你对你自己说：“哇，这确实相当的好啊，但感觉好像少了些什么”。</p>
<p><strong>Windows Vista Airlines</strong></p>
<p>你进入了一个非常漂亮的航站楼，旁边停着一架你从未见过的超级大的飞机。每隔10英尺，都会有一个安全人员出现，并问你是否“确认”你想要继续向前乘坐飞机，或者你可以取消这个飞行，当然，我们并不知道取消会意味着什么。你继续前行到一个桌子前询问为什么这架飞机那么大？在安全人员向你确认过你需要问问题并且你确实要听到回答后，工作人员告诉你，这是世界上最大的飞机，是因为它可以让乘客们感觉更好，但是因飞机的需求需要把飞机被设计成要比正常飞行速度慢两倍，所以他们只好加大尺寸，这样才能达到让他速度变慢的目标。</p>
<p>一旦上了飞机，每一个乘客都会被乘务员单独地询问是否真的想要乘坐本次航班，因为这是公司的制度规定。同样，机场还会再向大家再次询问同样的问题。当你回答了若干次“是”以后，你却被一些陌生人（黑客）在你的脸上打了一拳，因为那些陌生人问你：“你真确定我可以打你的脸吗？‘确定’或是‘取消’”，而你却条件反射地回答了“确定”。</p>
<p>在起飞的以后，飞行员意识到飞机的起落架驱动没有被更新，不能和新型的飞机在一些工作。所以，在整个飞机过程中，起落架都在处于降落的状态。这样一来，整个飞机飞行得更慢，但是飞行员继续飞行这样飞机，他们希望起落架的生产产商会尽快地给一个最新版本符合Vista航空公司标准的起落架驱动程序更新。</p>
<p>终于，你到达了你的目的地，你却得到的是Windows XP航空公司的奖励里程而不是尝试新型的飞机的奖励。你的一个亲密的朋友在听过你的故事以后，告诉你Linux航空公司会好得多。</p>
<p><strong>Linux Air</strong></p>
<p>对其它所有航空公司都不满的员工决定离开他们自己的航空公司。他们开始自己建造飞机，机票柜台，以及自己铺设飞机跑道。他们只用很少的费用给你提供可打印的机票，但你完全可以自己下载下来打印机票。</p>
<p>当你登机的时候，会有人递给你一个座位，四个螺栓，一个扳手和一本“安装座位-HOWTO.html”手册。一但安装好了，可随意调整或更改的座位可能让你相当地舒服，从飞机离开到目的地，其几乎不会发生一个错误，而且，飞机过程中的飞行餐非常不错。你会想去告诉选乘别的航空公司的乘客你那完美的经历，但你所能得到的回答是一句反问，“乘座飞机还要自己去安装自己的座位？”。</p>
<p>（全文完）</p>
<p>文章：<a href="http://www.linuxscrew.com/2007/10/07/fun-linux-unix-windows-os-x-and-dos-airlines/" target="_blank">来源</a><!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/4102.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/25.jpg" alt="如何学好C语言" width="150" height="150" /></a><a href="https://coolshell.cn/articles/4102.html" class="wp_rp_title">如何学好C语言</a></li><li ><a href="https://coolshell.cn/articles/4077.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg" alt="纯文本配置还是注册表" width="150" height="150" /></a><a href="https://coolshell.cn/articles/4077.html" class="wp_rp_title">纯文本配置还是注册表</a></li><li ><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg" alt="程序员练级攻略（2018)  与我的专栏" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018)  与我的专栏</a></li><li ><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2017/07/systemd-1-150x150.jpeg" alt="Linux PID 1 和 Systemd" width="150" height="150" /></a><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_title">Linux PID 1 和 Systemd</a></li><li ><a href="https://coolshell.cn/articles/12103.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2014/11/tux-fork-150x150.gif" alt="vfork 挂掉的一个问题" width="150" height="150" /></a><a href="https://coolshell.cn/articles/12103.html" class="wp_rp_title">vfork 挂掉的一个问题</a></li><li ><a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2014/08/puzzle-150x150.png" alt="谜题的答案和活动的心得体会" width="150" height="150" /></a><a href="https://coolshell.cn/articles/11847.html" class="wp_rp_title">谜题的答案和活动的心得体会</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1272.html">操作系统航空公司</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1272.html/feed</wfw:commentRss>
			<slash:comments>13</slash:comments>
		
		
			</item>
		<item>
		<title>恢复Ext3下被删除的文件</title>
		<link>https://coolshell.cn/articles/1265.html</link>
					<comments>https://coolshell.cn/articles/1265.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Fri, 14 Aug 2009 02:31:48 +0000</pubDate>
				<category><![CDATA[Unix/Linux]]></category>
		<category><![CDATA[操作系统]]></category>
		<category><![CDATA[debugfs]]></category>
		<category><![CDATA[ext3]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1265</guid>

					<description><![CDATA[<p> 下面是这个教程将教你如何在Ext3的文件系统中恢复被rm掉的文件。 假设我们有一个文件名叫 &#8216;test.txt&#8217;  $ls -il t...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1265.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1265.html">恢复Ext3下被删除的文件</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script> 下面是这个教程将教你如何在Ext3的文件系统中恢复被rm掉的文件。</p>
<p>假设我们有一个文件名叫 &#8216;test.txt&#8217;</p>
<div style="margin-left: 40px;"><span style="font-style: italic;"> </span><span style="font-weight: bold;"><span style="font-style: italic;">$ls -il test.txt</span></span><br style="font-style: italic;" /><span style="font-weight: bold;"><span style="font-style: italic;"> 15 -rw-rw-r&#8211; 2 root root 20 Apr 17 12:08 test.txt</span></span><br style="font-style: italic;" /><span style="font-weight: bold;"> </span></div>
<p>注意：: &#8220;-il&#8221; 选项表示显示文件的i-node号（15），如果你不知道Unix/Linux文件系统的“I结点”的话，你有必要先补充一下相关的知识。简单说来，i结点就是操作管理文件的一个标识号。</p>
<p><span id="more-1265"></span></p>
<p>我们再看一下其内容：</p>
<div style="margin-left: 40px;"><span style="font-weight: bold;"><span style="font-style: italic;">$ cat test.txt</span></span><br style="font-style: italic;" /><span style="font-weight: bold;"><span style="font-style: italic;">this is test file</span></span><br style="font-style: italic;" /></div>
<p>好，现在我们开始删除文件：.</p>
<div style="margin-left: 40px;"><span style="font-weight: bold;"><span style="font-style: italic;">$rm test.txt</span></span><br style="font-style: italic;" /><span style="font-weight: bold;"><span style="font-style: italic;">rm: remove write-protected regular file <code data-enlighter-language="mytest" class="EnlighterJSRAW">test.txt&#039;? y&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
 
&lt;h4&gt;使用 Journal 和 Inode 号恢复&lt;/h4&gt;
注意，如果你删除文件后重启了系统，那么，相关的文件 journal 会丢失，我们也就无法恢复文件了。所以，恢复文件的前提是，Journal不能丢失，即，系统不能重启。

因为我们已经知道 test.txt 文件的 inode 号是 15，所以我们可以使用 debugfs 命令来查看：
&lt;div style=&quot;margin-left: 40px;&quot;&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;debugfs: logdump -i &lt;15&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;FS block 1006 logged at sequence 404351, journal block 7241&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;(inode block for inode 15):&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;Inode: 15 Type: regular Mode: 0664 Flags: 0x0 Generation: 0&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;User: 0 Group: 0 Size: 20&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;File ACL: 0 Directory ACL: 0&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;Links: 1 Blockcount: 8&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;Fragment: Address: 0 Number: 0 Size: 0&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;ctime: 0x48159f2d -- Mon Apr 28 15:25:57 2008&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;atime: 0x48159f27 -- Mon Apr 28 15:25:51 2008&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;mtime: 0x4806f070 -- Thu Apr 17 12:08:40 2008&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;Blocks: (0+1): 10234&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;No magic number at block 7247: end of journal.&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;/div&gt;
&lt;span style=&quot;font-weight: bold;&quot;&gt;
&lt;/span&gt;请注意上面信息中的这一行：
&lt;div style=&quot;margin-left: 40px;&quot;&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;Blocks: (0+1): 10234&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
这就是inode 15存放文件的地址（数据块）。然后，我们知道了这个地址，我们就可以使用 dd 命令，把这个地址上的数据给取出来。
&lt;div style=&quot;margin-left: 40px;&quot;&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;#dd if=/dev/sda5 of=/tmp/test.txt bs=4096 count=1 skip= 10234&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;1+0 records in&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;1+0 records out&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;if 是输入的设备&lt;/li&gt;
	&lt;li&gt;of 是输出的设备.&lt;/li&gt;
	&lt;li&gt;bs 指定一个block的大小&lt;/li&gt;
	&lt;li&gt;count 说明有多少个block需要dump&lt;/li&gt;
	&lt;li&gt;skip 说明从开始的地方跳过 10234 个block，并从取下一个block的数据&lt;/li&gt;
&lt;/ul&gt;
下面让我们看一下被恢复的文件：
&lt;div style=&quot;margin-left: 40px;&quot;&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;$cat /tmp/test.txt &lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;this is test file&lt;/span&gt;&lt;/span&gt;&lt;br style=&quot;font-style: italic;&quot; /&gt;&lt;/div&gt;
&lt;span style=&quot;font-weight: bold;&quot;&gt;
&lt;/span&gt;当然，上面的文件恢复是基于我们知道文件的inode，可在现实中，我们并不知道这个信息，如果我们不知道inode，我们还可能恢复吗？是的，这是可能的，让我们来看一下如何恢复。
&lt;h4&gt;使用 Journal 和 文件名恢复&lt;/h4&gt;
如果我们不知道文件的inode我们可能恢复吗？我可以告诉你，这是不可能的事情。不过我们有办法知道文件的inode号。下面让我们来看看怎么做到：
&lt;div style=&quot;margin-left: 40px;&quot;&gt;&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;$rm mytest.txt&lt;/span&gt;&lt;br style=&quot;font-weight: bold; font-style: italic;&quot; /&gt;&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;rm: remove write-protected regular file </code>.txt&#8217;? y</span><br style="font-weight: bold; font-style: italic;" /></div>
<p>注意，我们并不知道其inode号，但我们可以使用 debugfs 命令来查看（使用其 ls -d 选项）。</p>
<div style="margin-left: 40px;"><span style="font-weight: bold; font-style: italic;">debugfs:  ls -d</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;"> 2  (12) .    2  (12) ..    11  (20) lost+found    2347777  (20) oss</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">&lt;2121567&gt; (20) mytest.txt</span><br style="font-weight: bold; font-style: italic;" /></div>
<p>你看文件名了吧，它的inode号是 &lt;2121567&gt; ，注意，被删除了的文件的inode都是用尖括号包起来的。</p>
<p>即然知道了inode号，那么我们就很容易恢复了（使用 logdump选项）：</p>
<div style="margin-left: 40px;"><span style="font-weight: bold; font-style: italic;">debugfs:  logdump -i &lt;2121567&gt;</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">Inode 2121567 is at group 65, block 2129985, offset 3840</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">Journal starts at block 1, transaction 405642</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">  FS block 2129985 logged at sequence 405644, journal block 9</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    (inode block for inode 2121567):</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    Inode: 2121567   Type: bad type        Mode:  0000   Flags: 0x0   Generation: 0</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    User:     0   Group:     0   Size: 0</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    File ACL: 0    Directory ACL: 0</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    Links: 0   Blockcount: 0</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    Fragment:  Address: 0    Number: 0    Size: 0</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    ctime: 0x00000000 &#8212; Thu Jan  1 05:30:00 1970</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    atime: 0x00000000 &#8212; Thu Jan  1 05:30:00 1970</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    mtime: 0x00000000 &#8212; Thu Jan  1 05:30:00 1970</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    Blocks:</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">  FS block 2129985 logged at sequence 405648, journal block 64</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    (inode block for inode 2121567):</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    Inode: 2121567   Type: regular        Mode:  0664   Flags: 0x0   Generation: 913772093</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    User:   100   Group:     0   Size: 31</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    File ACL: 2130943    Directory ACL: 0</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    Links: 1   Blockcount: 16</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    Fragment:  Address: 0    Number: 0    Size: 0</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    ctime: 0x4821d5d0 &#8212; Wed May  7 21:46:16 2008</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    atime: 0x4821d8be &#8212; Wed May  7 21:58:46 2008</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    mtime: 0x4821d5d0 &#8212; Wed May  7 21:46:16 2008</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    Blocks:  (0+1): 2142216</span><br style="font-weight: bold; font-style: italic;" /></div>
<p>上面有很多信息，让我们仔细地查看，你可以看到下面一行信息：</p>
<div style="margin-left: 40px;"><span style="font-weight: bold; font-style: italic;"> FS block 2129985 logged at sequence 405644, journal block 9</span><br style="font-weight: bold; font-style: italic;" /></div>
<p>并且，其类型是：</p>
<div style="margin-left: 40px;"><span style="font-weight: bold; font-style: italic;"> Type: bad type </span><br style="font-weight: bold; font-style: italic;" /></div>
<p>再仔细看一下文件的时间戳下面的<span style="font-weight: bold; font-style: italic;">Blocks:</span> 什么也没有。那么，让我们看一下下一个block：</p>
<div style="margin-left: 40px;"><span style="font-weight: bold; font-style: italic;">FS block 2129985 logged at sequence 405648, journal block 64</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">    (inode block for inode 2121567):</span><br style="font-weight: bold; font-style: italic;" /></div>
<p>这一条Journal就有block信息了：</p>
<div style="margin-left: 40px;"><span style="font-weight: bold; font-style: italic;">Blocks:  (0+1): 2142216</span></div>
<p>这就是被删除文件的地址，让我们再次运行恢复命令：</p>
<div style="margin-left: 40px;"><span style="font-weight: bold; font-style: italic;">$sudo dd if=/dev/sda5 of=/home/hchen/mytest_recovered.txt bs=4096 skip=2142216 count=1</span><br style="font-weight: bold; font-style: italic;" /></div>
<p>再让我们来检查一下文件内容：</p>
<div style="margin-left: 40px;"><span style="font-weight: bold; font-style: italic;">$ cat mytest_recovered.txt</span><br style="font-weight: bold; font-style: italic;" /><span style="font-weight: bold; font-style: italic;">this is my test file </span><br style="font-weight: bold; font-style: italic;" /></div>
<h4>小结</h4>
<p>好了，下面是我们的一些总结：<br />
<span style="font-weight: bold;">1)使用 debugfs: ls -d 找到被删除文件的inode号。</span><br style="font-weight: bold;" /><span style="font-weight: bold;">2)使用 debugfs:logdump找到文件的数据块地址。</span><br style="font-weight: bold;" /><span style="font-weight: bold;">3)使用dd 命令把数据取出来存成文件。</span></p>
<p>网上有很其它不同的方法来恢复文件，基本上也是使用debugfs这个命令，有的还使用到了lsdel，其实大同小异，这个教程是我在网上看到的，虽然他说只是针对Ext3文件系统的，但我总感觉应该可以用于Ext2文件系统，不过我没有试过。也许Ext2和Ext3被debugfs输出的信息不一样吧。大家可以去试试。</p>
<p>（全文完）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/8711.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2012/12/200906020837401710-150x150.jpg" alt="程序员疫苗：代码注入" width="150" height="150" /></a><a href="https://coolshell.cn/articles/8711.html" class="wp_rp_title">程序员疫苗：代码注入</a></li><li ><a href="https://coolshell.cn/articles/1379.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/13.jpg" alt="如何调试bash脚本" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1379.html" class="wp_rp_title">如何调试bash脚本</a></li><li ><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2012/07/muxnt-150x150.jpg" alt="代码执行的效率" width="150" height="150" /></a><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_title">代码执行的效率</a></li><li ><a href="https://coolshell.cn/articles/424.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/18.jpg" alt="PDF电子书搜索引擎" width="150" height="150" /></a><a href="https://coolshell.cn/articles/424.html" class="wp_rp_title">PDF电子书搜索引擎</a></li><li ><a href="https://coolshell.cn/articles/3649.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/10.jpg" alt="TDD并不是看上去的那么美" width="150" height="150" /></a><a href="https://coolshell.cn/articles/3649.html" class="wp_rp_title">TDD并不是看上去的那么美</a></li><li ><a href="https://coolshell.cn/articles/8883.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2013/01/linux-bash-300x225-150x150.jpg" alt="应该知道的Linux技巧" width="150" height="150" /></a><a href="https://coolshell.cn/articles/8883.html" class="wp_rp_title">应该知道的Linux技巧</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1265.html">恢复Ext3下被删除的文件</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1265.html/feed</wfw:commentRss>
			<slash:comments>8</slash:comments>
		
		
			</item>
		<item>
		<title>你用Linux命令行吗？</title>
		<link>https://coolshell.cn/articles/1256.html</link>
					<comments>https://coolshell.cn/articles/1256.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Thu, 13 Aug 2009 16:19:58 +0000</pubDate>
				<category><![CDATA[Unix/Linux]]></category>
		<category><![CDATA[操作系统]]></category>
		<category><![CDATA[CLI]]></category>
		<category><![CDATA[Linux]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1256</guid>

					<description><![CDATA[<p>想一想，如果你要把一个图片的尺寸改小一点，你会怎么办？当然，我一定会启动一个图形编辑软件，然后，打开图片文件，从菜单上选择相关的工具选项，更改大小，然后保存文件...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1256.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1256.html">你用Linux命令行吗？</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script><a href="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp.png"></a><a href="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp.png"></a>想一想，如果你要把一个图片的尺寸改小一点，你会怎么办？当然，我一定会启动一个图形编辑软件，然后，打开图片文件，从菜单上选择相关的工具选项，更改大小，然后保存文件。就算是在Linux下，我可能也是这么干的，比如Ubuntu下也是这样，如下图：</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp.png"><img decoding="async" loading="lazy" class="aligncenter" title="photo_gimp" src="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp-290x300.png" alt="photo_gimp" width="290" height="300" /></a><a href="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp.png"></a></p>
<p>但其实，如果你用命令行来更改图片大小的话，一条语句就可以搞定了。如：</p>
<pre style="padding-left: 30px; text-align: left;"><strong>convert -resize 300 profile.jpg profile_small.jpg</strong></pre>
<p>当然，如果你要使用这样的命令，你需要安装<a href="http://www.imagemagick.org/script/index.php">Imagemagick</a>，你可通过apt-get install imagemagick来安装一下。</p>
<p><span id="more-1256"></span></p>
<p>不管怎么说，很简单吧，下面还有几个：</p>
<p><strong>1）给图片加阴影</strong></p>
<p>给图片加阴影可以使用下面的这个命令：</p>
<pre style="padding-left: 30px; text-align: left;"><strong>convert screenshot.jpg
\( +clone -background black -shadow 60×5+0+5 \)
+swap -background white -layers merge +repage shadow.jpg</strong></pre>
<p>效果如下：</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp.png"></a><a href="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp.png"></a><a href="https://coolshell.cn/wp-content/uploads/2009/08/screenshot-suse.jpg"><img decoding="async" loading="lazy" class="alignleft" title="screenshot-suse" src="https://coolshell.cn/wp-content/uploads/2009/08/screenshot-suse.jpg" alt="screenshot-suse" width="240" height="180" /></a><a href="https://coolshell.cn/wp-content/uploads/2009/08/shadow.png"><img decoding="async" loading="lazy" title="shadow" src="https://coolshell.cn/wp-content/uploads/2009/08/shadow.png" alt="shadow" width="260" height="200" /></a> <a href="https://coolshell.cn/wp-content/uploads/2009/08/screenshot-suse.jpg"></a></p>
<p><strong>2）把两个MP3拼起来</strong></p>
<pre style="padding-left: 30px; text-align: left;"><strong>cat 1.mp3 2.mp3 &gt; combined.mp3</strong></pre>
<p><strong>3）克隆一个硬盘设备</strong></p>
<pre style="padding-left: 30px; text-align: left;"><strong>dd if=/dev/hda of=/dev/hdb</strong></pre>
<p><strong>4）把ISO文件刻录光盘</strong></p>
<pre style="padding-left: 30px; text-align: left;"><strong>cdrecord -v speed=8 dev=0,0,0 name_of_iso_file.iso</strong></pre>
<p><strong>5）视频格式转换</strong></p>
<p>AVI和Mpeg转换</p>
<pre style="padding-left: 30px; text-align: left;"><strong>ffmpeg -i video_origine.avi video_finale.mpg
ffmpeg -i video_origine.mpg video_finale.avi</strong></pre>
<p>查看这个<a href="http://www.catswhocode.com/blog/19-ffmpeg-commands-for-all-needs" target="_blank">链接</a>，你可以看看ffmpeg可以干得更多。</p>
<p><strong>6）替换文件中的文本</strong></p>
<pre style="padding-left: 30px; text-align: left;"><strong>sed ’s/#FF0000/#0000FF/g’ main.css</strong></pre>
<p>把main.css中的#FF0000(红色)替换成#0000FF（蓝色）</p>
<p> </p>
<p>如果你非常喜欢命令行的话，那么你一定要看一下下面这本书（免费在线）</p>
<p>GNU/Linux命令行介绍：<a href="http://en.flossmanuals.net/gnulinux">http://en.flossmanuals.net/gnulinux</a></p>
<p>（全文完）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/7829.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2012/07/dstat_screenshot-150x150.png" alt="28个Unix/Linux的命令行神器" width="150" height="150" /></a><a href="https://coolshell.cn/articles/7829.html" class="wp_rp_title">28个Unix/Linux的命令行神器</a></li><li ><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2022/12/eBPF-150x150.jpeg" alt="eBPF 介绍" width="150" height="150" /></a><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_title">eBPF 介绍</a></li><li ><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2019/03/linux.ninja_-150x150.png" alt="打造高效的工作环境 &#8211; Shell 篇" width="150" height="150" /></a><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_title">打造高效的工作环境 &#8211; Shell 篇</a></li><li ><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2018/12/docker-networking-1-150x150.png" alt="记一次Kubernetes/Docker网络排障" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_title">记一次Kubernetes/Docker网络排障</a></li><li ><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg" alt="程序员练级攻略（2018)  与我的专栏" width="150" height="150" /></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018)  与我的专栏</a></li><li ><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2017/07/systemd-1-150x150.jpeg" alt="Linux PID 1 和 Systemd" width="150" height="150" /></a><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_title">Linux PID 1 和 Systemd</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1256.html">你用Linux命令行吗？</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1256.html/feed</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
	</channel>
</rss>
